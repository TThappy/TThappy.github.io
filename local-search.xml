<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode之Python</title>
    <link href="/2020/10/31/leetcode%E4%B9%8BPython/"/>
    <url>/2020/10/31/leetcode%E4%B9%8BPython/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a class="markdownIt-Anchor" href="#两数之和"></a> 两数之和</h1><p>题目：给定一个整数数组 <code>nums</code>和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>示例:</p><div class="hljs"><pre><code class="hljs python">给定 nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>因为 nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>所以返回 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</code></pre></div><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p><h2 id="暴力解法"><a class="markdownIt-Anchor" href="#暴力解法"></a> 暴力解法</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(nums)):                <span class="hljs-keyword">if</span> (j==i):                    <span class="hljs-keyword">break</span>                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">if</span>  target - nums[i] == nums[j]:                        <span class="hljs-keyword">return</span> [i,j]</code></pre></div><h2 id="时间复杂度on解法"><a class="markdownIt-Anchor" href="#时间复杂度on解法"></a> 时间复杂度O(n)解法</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span>        hashmap = &#123;&#125; <span class="hljs-comment">#key:num value:index</span>        <span class="hljs-keyword">for</span> index,num <span class="hljs-keyword">in</span> enumerate(nums):             another_num = target - nums[index]            <span class="hljs-keyword">if</span> another_num <span class="hljs-keyword">in</span> hashmap:                <span class="hljs-keyword">return</span> [hashmap[another_num],index]            hashmap[num] = index        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>算法</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB安装和python连接</title>
    <link href="/2020/10/24/MongoDB%E5%AE%89%E8%A3%85%E5%92%8Cpython%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/10/24/MongoDB%E5%AE%89%E8%A3%85%E5%92%8Cpython%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="安装mongodb"><a class="markdownIt-Anchor" href="#安装mongodb"></a> 安装MongoDB</h1><p>这里只介绍用docker安装MongoDB并用navicat远程连接</p><h2 id="安装镜像"><a class="markdownIt-Anchor" href="#安装镜像"></a> 安装镜像</h2><div class="hljs"><pre><code class="hljs html">docker pull mongo:latest</code></pre></div><h2 id="运行容器"><a class="markdownIt-Anchor" href="#运行容器"></a> 运行容器</h2><div class="hljs"><pre><code class="hljs html">docker run -itd --name mongo -p 27017:27017 mongo --auth</code></pre></div><h2 id="设置服务器的端口防火墙"><a class="markdownIt-Anchor" href="#设置服务器的端口防火墙"></a> 设置服务器的端口防火墙</h2><p>添加安全规则，打开<code>27017</code>端口</p><h2 id="创建用户"><a class="markdownIt-Anchor" href="#创建用户"></a> 创建用户</h2><p>使用MongoDB自带的<code>admin</code>数据库创建用户</p><div class="hljs"><pre><code class="hljs python">$ docker <span class="hljs-keyword">exec</span> -it mongo mongo admin<span class="hljs-comment"># 创建一个名为 admin，密码为 123456 的用户。</span>&gt;  db.createUser(&#123; user:<span class="hljs-string">'admin'</span>,pwd:<span class="hljs-string">'123456'</span>,roles:[ &#123; role:<span class="hljs-string">'userAdminAnyDatabase'</span>, db: <span class="hljs-string">'admin'</span>&#125;,<span class="hljs-string">"readWriteAnyDatabase"</span>]&#125;);<span class="hljs-comment"># 尝试使用上面创建的用户信息进行连接。</span>&gt; db.auth(<span class="hljs-string">'admin'</span>, <span class="hljs-string">'123456'</span>)</code></pre></div><h2 id="更改mongodcnforig配置文件"><a class="markdownIt-Anchor" href="#更改mongodcnforig配置文件"></a> 更改<code>mongod.cnf.orig</code>配置文件</h2><h3 id="进入mongodb容器"><a class="markdownIt-Anchor" href="#进入mongodb容器"></a> 进入MongoDB容器</h3><p><code>docker exec -it mongo /bin/bash</code></p><h3 id="安装vim"><a class="markdownIt-Anchor" href="#安装vim"></a> 安装vim</h3><ol><li><code>apt-get update</code></li><li><code>apt-get install vim</code></li></ol><h3 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h3><p>进入<code>/etc</code>用<code>vim mongod.cnf.orig</code>打开文件修改以下内容</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># network interfaces</span>net:  port: <span class="hljs-number">27017</span>  bindIp: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> security:  authorization: <span class="hljs-string">'enabled'</span></code></pre></div><h3 id="重启mongodb容器"><a class="markdownIt-Anchor" href="#重启mongodb容器"></a> 重启MongoDB容器</h3><p><code>docker restart mongo</code></p><p>接着就可以远程使用<code>navicat</code>连接了，用刚刚创建的用户，数据库写<code>admin</code></p><h1 id="python使用mongodb"><a class="markdownIt-Anchor" href="#python使用mongodb"></a> Python使用MongoDB</h1><h2 id="安装pymongo"><a class="markdownIt-Anchor" href="#安装pymongo"></a> 安装pymongo</h2><p><code>pip install pymongo</code></p><h2 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongoclient = pymongo.MongoClient(<span class="hljs-string">'mongodb://用户名:密码@ip:27017/'</span>)db = client.test <span class="hljs-comment">#连接test数据库 等价于 client['test']</span>collection = db.students <span class="hljs-comment">#stdents表 等价于 db['students']</span>result = collection.insert_one(&#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'200'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'orange'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>&#125;)print(result) <span class="hljs-comment">#有结果证明连接成功</span></code></pre></div><h2 id="插入数据"><a class="markdownIt-Anchor" href="#插入数据"></a> 插入数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongoclient = pymongo.MongoClient(<span class="hljs-string">'mongodb://用户名:密码@ip:27017/'</span>)db = client.test <span class="hljs-comment">#连接test数据库 等价于 client['test']</span>collection = db.students <span class="hljs-comment">#stdents表 等价于 db['students']</span><span class="hljs-comment">#插入单个数据</span>result = collection.insert_one(&#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'200'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'orange'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>&#125;)<span class="hljs-comment">#插入多个数据</span>result2 = collection.insert_many([&#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'200'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'orange'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'200'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'orange'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">21</span>&#125;])</code></pre></div><h2 id="查询数据"><a class="markdownIt-Anchor" href="#查询数据"></a> 查询数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongoclient = pymongo.MongoClient(<span class="hljs-string">'mongodb://用户名:密码@ip:27017/'</span>)db = client.test <span class="hljs-comment">#连接test数据库 等价于 client['test']</span>collection = db.students <span class="hljs-comment">#stdents表 等价于 db['students']</span><span class="hljs-comment">#查询所有name是wyc的</span>result = collection.find(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)<span class="hljs-comment">#查询一条数据</span>result = collection.find_one(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)<span class="hljs-comment">#按条件查询</span>result = collection.find(&#123;<span class="hljs-string">'age'</span>:&#123;<span class="hljs-string">'$lt'</span>:<span class="hljs-number">20</span>&#125;&#125;) <span class="hljs-comment">#查询年龄小于20的数据</span><span class="hljs-comment">#计数</span>result = collection.find(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;).count()<span class="hljs-comment">#排序</span>result = collection.find(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;).sort(<span class="hljs-string">'name'</span>,pymongo.ASCENDING) <span class="hljs-comment">#name类型升序</span>result = collection.find(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;).sort(<span class="hljs-string">'name'</span>,pymongo.DESCEDING) <span class="hljs-comment">#name类型降序</span><span class="hljs-comment">#偏移和限制</span>result = collection.find(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;).sort(<span class="hljs-string">'name'</span>,pymongo.ASCENDING).skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">2</span>) <span class="hljs-comment">#忽略前两个元素和返回两个结果</span>print(result)</code></pre></div><p>​<strong>比较符号</strong></p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$lt</td><td>小于</td><td>{‘age’: {’$lt’: 20} }</td></tr><tr><td>$gt</td><td>大于</td><td>{‘age’: {’$gt’: 20} }</td></tr><tr><td>$lte</td><td>小于等于</td><td>{‘age’: {’$lte’: 20} }</td></tr><tr><td>$gte</td><td>大于等于</td><td>{‘age’: {’$gte’: 20} }</td></tr><tr><td>$ne</td><td>不等于</td><td>{‘age’: {’$ne’: 20} }</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’: {’$in’: [20,23 ] } }</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’: {’$nin’: [20,23 ]} }</td></tr></tbody></table><p>​<strong>功能符号</strong></p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>示例含义</th></tr></thead><tbody><tr><td>$regex</td><td>匹配正则表达式</td><td>{‘name’: {’$regex’: ‘^M.*’} }</td><td>name以M开头</td></tr><tr><td>$exists</td><td>属性是否存在</td><td>{‘name’: {’$exists’: True } }</td><td>name属性存在</td></tr><tr><td>$type</td><td>类型判断</td><td>{‘age’:{’$type’:‘int’ }}</td><td>age的类型为int</td></tr><tr><td>$mod</td><td>数字模操作</td><td>{‘age’:{’$mod’:[5,0] }}</td><td>年龄模5余0</td></tr><tr><td>$text</td><td>文本查询</td><td>{‘<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;EOF&#039; at end of input: text&#039;:{&#039;">text&#039;:{&#039;</span>search’: ‘Mike’ }}</td><td>text类型的属性中包含Mike字符串</td></tr><tr><td>$where</td><td>高级条件查询</td><td>{’$where’:‘obj.fans_count == obj.follows_count’}</td><td>自身粉丝数等于关注数</td></tr></tbody></table><h2 id="更新数据"><a class="markdownIt-Anchor" href="#更新数据"></a> 更新数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongoclient = pymongo.MongoClient(<span class="hljs-string">'mongodb://用户名:密码@ip:27017/'</span>)db = client.test <span class="hljs-comment">#连接test数据库 等价于 client['test']</span>collection = db.students <span class="hljs-comment">#stdents表 等价于 db['students']</span>student = collection.find_one(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)student[<span class="hljs-string">'age'</span>] = <span class="hljs-number">25</span><span class="hljs-comment">#更新一个</span>result = collection.update_one(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;,&#123;<span class="hljs-string">'$set'</span>:student&#125;)<span class="hljs-comment">#更新多个</span>result = collection.update_many(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;,&#123;<span class="hljs-string">'$inc'</span>:&#123;<span class="hljs-string">'age'</span>:<span class="hljs-number">1</span>&#125;&#125;) <span class="hljs-comment">#年龄加一</span></code></pre></div><h2 id="删除数据"><a class="markdownIt-Anchor" href="#删除数据"></a> 删除数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongoclient = pymongo.MongoClient(<span class="hljs-string">'mongodb://用户名:密码@ip:27017/'</span>)db = client.test <span class="hljs-comment">#连接test数据库 等价于 client['test']</span>collection = db.students <span class="hljs-comment">#stdents表 等价于 db['students']</span><span class="hljs-comment">#删除一个</span>collection.delete_one(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)<span class="hljs-comment">#删除多个</span>collection.delete_many(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)</code></pre></div><h1 id="封装的方法"><a class="markdownIt-Anchor" href="#封装的方法"></a> 封装的方法</h1><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongo<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mongo</span><span class="hljs-params">()</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,user,password,uri)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        初始化MongoDB连接</span><span class="hljs-string">        :param user: 用户名</span><span class="hljs-string">        :param password: 密码</span><span class="hljs-string">        :param uri: ip+port</span><span class="hljs-string">        '''</span>        self.client = pymongo.MongoClient(<span class="hljs-string">'mongodb://&#123;&#125;:&#123;&#125;@&#123;&#125;/'</span>.format(user,password,uri))con = Mongo(<span class="hljs-string">'用户名'</span>,<span class="hljs-string">'密码'</span>,<span class="hljs-string">'ip:port'</span>)db = con.client.myDbcollection = db.students<span class="hljs-comment">#插入数据</span><span class="hljs-comment"># result = collection.insert_one(&#123;'name':'wyc','age':13&#125;)</span><span class="hljs-comment"># result2 = collection.insert_many([&#123;'name':'wyc','age':12&#125;,&#123;'name':'wyl','age':11&#125;])</span><span class="hljs-comment"># print(result,result2)</span><span class="hljs-comment">#查询</span><span class="hljs-comment"># result = collection.find(&#123;'name':'wyc'&#125;)</span><span class="hljs-comment"># for i in result:</span><span class="hljs-comment">#     print(i)</span><span class="hljs-comment"># print(result)</span><span class="hljs-comment">#更新</span><span class="hljs-comment"># student = collection.find(&#123;'name':'wyc'&#125;)</span><span class="hljs-comment"># result = collection.update_one(&#123;'name':'wyc'&#125;,&#123;'$set':student&#125;)</span><span class="hljs-comment"># result = collection.update_many(&#123;'name':'wyc'&#125;,&#123;'$inc':&#123;'age':1&#125;&#125;)</span><span class="hljs-comment"># print(result)</span><span class="hljs-comment">#删除</span>collection.delete_many(&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'wyc'</span>&#125;)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>MongoDB</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pymysql库</title>
    <link href="/2020/10/23/pymysql%E5%BA%93/"/>
    <url>/2020/10/23/pymysql%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="python连接数据库使用"><a class="markdownIt-Anchor" href="#python连接数据库使用"></a> python连接数据库使用</h1><h2 id="pymysql库安装"><a class="markdownIt-Anchor" href="#pymysql库安装"></a> pymysql库安装</h2><div class="hljs"><pre><code class="hljs py">pip install pymysql</code></pre></div><h2 id="python连接数据库"><a class="markdownIt-Anchor" href="#python连接数据库"></a> python连接数据库</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqlpymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)</code></pre></div><h2 id="插入数据"><a class="markdownIt-Anchor" href="#插入数据"></a> 插入数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)cursor = db.cursor()sql = <span class="hljs-string">'insert into 表名(...属性) values(%s,%s,%s)'</span><span class="hljs-keyword">try</span>:    cursor.excute(sql,(...属性)) <span class="hljs-comment">#第二个参数相当于插入value的值，必须是元祖的形式</span>    db.commit()<span class="hljs-keyword">except</span>:    db.roollback()db.close()</code></pre></div><h2 id="更新数据"><a class="markdownIt-Anchor" href="#更新数据"></a> 更新数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)cursor = db.cursor()sql = <span class="hljs-string">'update  表名 set 属性=%s where 属性=%s'</span><span class="hljs-keyword">try</span>:    cursor.excute(sql,(...属性)) <span class="hljs-comment">#第二个参数相当于插入value的值，必须是元祖的形式</span>    db.commit()<span class="hljs-keyword">except</span>:    db.roollback()db.close()</code></pre></div><h2 id="插入并更新插入更新写一起"><a class="markdownIt-Anchor" href="#插入并更新插入更新写一起"></a> 插入并更新(插入更新写一起)</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)cursor = db.cursor()data = &#123;    <span class="hljs-string">'id'</span>:<span class="hljs-number">100</span>,    <span class="hljs-string">'name'</span>: <span class="hljs-string">'wyc'</span>,    <span class="hljs-string">'age'</span>: <span class="hljs-string">'13'</span>&#125;table = <span class="hljs-string">'表名'</span>,keys = <span class="hljs-string">','</span>.join(data.keys())values = <span class="hljs-string">','</span>.join([<span class="hljs-string">'%s'</span>] * len(data))sql = <span class="hljs-string">'insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;) on duplicate key update 空格'</span>update = <span class="hljs-string">','</span>.join([<span class="hljs-string">"&#123;key&#125; = %s"</span>.format(key=key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> data])sql += update <span class="hljs-keyword">try</span>:    <span class="hljs-keyword">if</span> cursor.execute(sql,tuple(data.values()) * <span class="hljs-number">2</span>):        <span class="hljs-comment">#相当于对'insert into students(id,name,age) values(%s,%s,%s) on duplicate key update id=%s,name=%s,age=%s' 赋值两次</span>        print(<span class="hljs-string">"插入或者更新成功"</span>)        db.commint()    <span class="hljs-keyword">except</span>:        print(<span class="hljs-string">"插入或者更新失败"</span>)        db.rollback()db.close()</code></pre></div><h2 id="删除数据"><a class="markdownIt-Anchor" href="#删除数据"></a> 删除数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)cursor = db.cursor()sql = <span class="hljs-string">'delete from &#123;table&#125; where &#123;condition&#125;'</span><span class="hljs-keyword">try</span>:    cursor.excute(sql)     db.commit()<span class="hljs-keyword">except</span>:    db.roollback()db.close()</code></pre></div><h2 id="查询数据"><a class="markdownIt-Anchor" href="#查询数据"></a> 查询数据</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'ip'</span>,user=<span class="hljs-string">'用户名'</span>,password=<span class="hljs-string">'密码'</span>,port=端口号(int类型),db=<span class="hljs-string">'数据库名称'</span>)cursor = db.cursor()sql = <span class="hljs-string">'select * from &#123;table&#125; where &#123;condition&#125;'</span><span class="hljs-keyword">try</span>:    <span class="hljs-comment">#第一种</span>    cursor.excute(sql)     row = cursor.fetchone() <span class="hljs-comment">#游标指向第一个</span>    <span class="hljs-keyword">while</span> row:        print(<span class="hljs-string">'Row:'</span>,row)        row = cursor.fetchone() <span class="hljs-comment">#一个一个循环所有的数据</span>    <span class="hljs-comment">#第二种</span>    rows = cursor.fetchall() <span class="hljs-comment">#所有的行数据相当于迭代器</span>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:        print(row)    db.commit()<span class="hljs-keyword">except</span>:    db.roollback()db.close()</code></pre></div><h1 id="封装好的增删改查类"><a class="markdownIt-Anchor" href="#封装好的增删改查类"></a> 封装好的增删改查类</h1><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mysql</span><span class="hljs-params">()</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,host,user,password,port,db)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        初始化数据库连接</span><span class="hljs-string">        :param host: ip地址</span><span class="hljs-string">        :param user: 账号</span><span class="hljs-string">        :param password: 密码</span><span class="hljs-string">        :param port: 端口</span><span class="hljs-string">        :param db: 数据库名称</span><span class="hljs-string">        '''</span>        self.DB = pymysql.connect(host=host,user=user,password=password,port=port,db=db)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cursor</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        初始化一个游标</span><span class="hljs-string">        :return: 数据库游标</span><span class="hljs-string">        '''</span>        <span class="hljs-keyword">return</span> self.DB.cursor()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">commint</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        提交事务</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        self.DB.commit()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rollback</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        回滚事务</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        self.DB.rollback()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        关闭连接</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        self.DB.close()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key</span><span class="hljs-params">(self,data)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        返回对象的keys</span><span class="hljs-string">        :param data:对象数据</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">','</span>.join(data.keys())    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">value</span><span class="hljs-params">(self,data)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        返回对象的长度的%s</span><span class="hljs-string">        :param data:对象数据</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">','</span>.join([<span class="hljs-string">'%s'</span>] * len(data))    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list</span><span class="hljs-params">(self,table,condition=None)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        数据库表查询</span><span class="hljs-string">        :param table: 表名</span><span class="hljs-string">        :param condition: 条件，默认为空</span><span class="hljs-string">        :return: 查询到的游标</span><span class="hljs-string">        '''</span>        <span class="hljs-keyword">try</span>:            cursor = self.cursor()            <span class="hljs-keyword">if</span>(condition):                cursor.execute(<span class="hljs-string">"select * from &#123;&#125; where &#123;&#125;"</span>.format(table,condition))            <span class="hljs-keyword">else</span>:                cursor.execute(<span class="hljs-string">"select * from &#123;&#125;"</span>.format(table, condition))            self.commint()            <span class="hljs-keyword">return</span> cursor        <span class="hljs-keyword">except</span>:            self.rollback()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(self,table,data)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        插入或更新数据</span><span class="hljs-string">        :param table: 表名</span><span class="hljs-string">        :param data: 插入的数据对象即字典</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        cursor = self.cursor()        keys = self.key(data)        values = self.value(data)        sql = <span class="hljs-string">'insert into &#123;&#125;(&#123;&#125;) values(&#123;&#125;) on duplicate key update '</span>.format(table,keys,values)        update = <span class="hljs-string">','</span>.join([<span class="hljs-string">"&#123;key&#125; = %s"</span>.format(key=key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> data])        sql += update        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> cursor.execute(sql,tuple(data.values()) * <span class="hljs-number">2</span>):                print(<span class="hljs-string">"插入或者更新成功"</span>)                self.commint()        <span class="hljs-keyword">except</span>:            print(<span class="hljs-string">"插入或者更新失败"</span>)            self.rollback()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(self,table,condition)</span>:</span>        <span class="hljs-string">'''</span><span class="hljs-string">        删除表数据</span><span class="hljs-string">        :param table:表名</span><span class="hljs-string">        :param condition: 条件</span><span class="hljs-string">        :return:</span><span class="hljs-string">        '''</span>        cursor = self.cursor()        sql = <span class="hljs-string">'delete from &#123;&#125; where &#123;&#125;'</span>.format(table,condition)        <span class="hljs-keyword">try</span>:            cursor.execute(sql)            print(<span class="hljs-string">"删除成功"</span>)            self.commint()        <span class="hljs-keyword">except</span>:            print(<span class="hljs-string">"删除失败"</span>)            self.rollback()            con = Mysql(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-number">3306</span>,<span class="hljs-string">'数据库名'</span>)<span class="hljs-comment">#查询</span><span class="hljs-comment"># cursor = con.list('user')</span><span class="hljs-comment"># students = cursor.fetchall()</span><span class="hljs-comment"># for i in students:</span><span class="hljs-comment">#     print(i)</span><span class="hljs-comment"># con.close()</span><span class="hljs-comment"># 插入或者更新</span><span class="hljs-comment"># con.add('student',&#123;'id':'6','name':'afasf','age':'14'&#125;)</span><span class="hljs-comment">#删除数据</span><span class="hljs-comment"># con.delete('student','id=6')</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pymsql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫和正则</title>
    <link href="/2020/09/04/Python%E7%88%AC%E8%99%AB%E5%92%8C%E6%AD%A3%E5%88%99/"/>
    <url>/2020/09/04/Python%E7%88%AC%E8%99%AB%E5%92%8C%E6%AD%A3%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="网络爬虫"><a class="markdownIt-Anchor" href="#网络爬虫"></a> 网络爬虫</h1><ol><li><p>查看源代码</p></li><li><p>按F12查看network监听请求(抓包)</p></li><li><p>解密</p><p>提取HTML中所有URL链接<br>思路:1)搜索到所有<a>标签<br>2)解析<a>标签格式,提取href后的链接内容。</a></a></p></li><li></li></ol><h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><p>1.\w 字母、数字、下划线</p><p>2.\W 除字母、数字、下划线</p><p>3.\d 十进制数字</p><p>4.\D 除十进制数字</p><p>5.\s 空白字符</p><p>6.\S 除空白字符</p><p>7.[abc] 代表原子表只选择其中一个abc</p><p>8.[ ^abc ] 代表非abc的一个</p><h3 id="元字符"><a class="markdownIt-Anchor" href="#元字符"></a> 元字符</h3><ol><li>点  表示除换行符任意字符</li><li>^ 匹配开始位置</li><li>$ 匹配结束位置</li><li>‘*’ 匹配0\1\多次</li><li>？ 0\1次</li><li>‘+’ 1\多次</li><li>{n} 恰好n次</li><li>{n,} 至少n次</li><li>{n,m} 至少n次，至多m次</li><li>| 表示或</li><li>() 模式单元</li></ol><h3 id="模式修政符"><a class="markdownIt-Anchor" href="#模式修政符"></a> 模式修政符</h3><ol><li>I 匹配时忽略大小写</li><li>M 多行匹配</li><li>L 本地化识别匹配</li><li>U Unicode</li><li>S 让. 匹配包括换行符</li></ol><p>应用：</p><div class="hljs"><pre><code class="hljs python">string=<span class="hljs-string">"Python"</span>pat=<span class="hljs-string">"pyt"</span>rst=re. search(pat, string, re.)print(rst)</code></pre></div><h3 id="贪婪模式与懒惰模式"><a class="markdownIt-Anchor" href="#贪婪模式与懒惰模式"></a> 贪婪模式与懒惰模式</h3><p>应用:</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#贪婪模式与懒惰模式</span> string=<span class="hljs-string">"poythonyhjskjsa</span><span class="hljs-string">pat1="</span>p.*y<span class="hljs-string">"#贪婪模式</span>pat2="p.*?y"#懒惰模式</code></pre></div><h3 id="python-中正则表达式函数"><a class="markdownIt-Anchor" href="#python-中正则表达式函数"></a> python 中正则表达式函数</h3><ol><li><p>re.match() #与search用法一致，不过是从头匹配</p></li><li><p>re.search()  #第一个变量放正则表达式，第二个放内容</p></li><li><p>re.sub()</p></li><li><p>全局匹配</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#全局匹配格式re. compile(正则表达式). findall(数据)</span>rst=re. compile(. findall(string)</code></pre></div></li></ol><h3 id="常见正则实例"><a class="markdownIt-Anchor" href="#常见正则实例"></a> 常见正则实例</h3><ol><li>匹配网址：&quot;[a-zA-Z]+://[ ^\s]*[.com|.cn]&quot;</li><li>匹配电话号码:&quot;\d{4}-\d{7} |\d{3}-\d{8} &quot;</li></ol><h2 id="简单爬虫urllib编写"><a class="markdownIt-Anchor" href="#简单爬虫urllib编写"></a> 简单爬虫urllib编写</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<span class="hljs-keyword">import</span> re <span class="hljs-comment">#正则库</span>data = urllib.request.urlopen(url).read().decode(<span class="hljs-string">"utf-8"</span>)pat = <span class="hljs-string">"正则表达式"</span>result = re.compile(pat).findall(data) <span class="hljs-comment">#列表</span>print(result)</code></pre></div><div class="hljs"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> urllib. request<span class="hljs-comment">#ur retrieve(网址,本地文件存储地址)直接下载网页到本地</span> ur ll ib. request. ur  Iretrieve (<span class="hljs-string">"http: //www. baidu. com"</span>, <span class="hljs-string">"d: \" )</span><span class="hljs-string"> urIlib. request. ur lcleanup</span><span class="hljs-string">#看网页相应的简介信息info</span><span class="hljs-string"> file=urllib. request. ur lopen ("</span>https: //read. douban. com/pr..<span class="hljs-string">")</span><span class="hljs-string"> print(file. infoO)</span><span class="hljs-string">#返回网页爬取的状态码getcode</span><span class="hljs-string"> print(file. getcode()</span><span class="hljs-string">#获取当前访问的网页的url, geturI0</span><span class="hljs-string"> print(file. geturl0)</span><span class="hljs-string">post请求实战</span><span class="hljs-string"> import urllib. request</span><span class="hljs-string"> import urllib. parse</span><span class="hljs-string"> postur l="</span>http: //www. igianyue. com/mypost/<span class="hljs-string">"</span><span class="hljs-string"> postdata=ur llib. parse. ur lencode (</span><span class="hljs-string"> "</span>name<span class="hljs-string">": "</span>ceo@txk7. com<span class="hljs-string">"</span><span class="hljs-string"> "</span><span class="hljs-keyword">pass</span><span class="hljs-string">": "</span>kjsahg jkashg<span class="hljs-string">",</span><span class="hljs-string"> ]) encode("</span>utf<span class="hljs-number">-8</span><span class="hljs-string">")</span><span class="hljs-string">#进行post,就需要使用 ur Ilib. reqestRequest下面的(真实post地址,post数据</span><span class="hljs-string"> req=ur llib. request. Request (postur, postdata)</span><span class="hljs-string"> rst=ur ll ib. request. ur lopen(reg. read. decode ("</span>utf<span class="hljs-number">-8</span><span class="hljs-string">")</span><span class="hljs-string">open("</span>:\\我的教学\Python\韬云教育-讯 Python爬虫pw<span class="hljs-string">")</span></code></pre></div><h2 id="requests-库"><a class="markdownIt-Anchor" href="#requests-库"></a> requests  库</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-comment"># 添加 headers</span>headers = &#123;    <span class="hljs-string">"User-Agent"</span>:..&#125;response = request.get(url,headers=headers)demo = response.text <span class="hljs-comment">#网站源代码</span>response.content <span class="hljs-comment">#二进制文件</span></code></pre></div><h2 id="beautifulsoup-库"><a class="markdownIt-Anchor" href="#beautifulsoup-库"></a> BeautifulSoup 库</h2><p>1.使用方式</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoupsoup = BeautifulSoup(<span class="hljs-string">"&lt;p&gt;data&lt;/p&gt;"</span>,<span class="hljs-string">'html.parser'</span>)soup.prettify() <span class="hljs-comment">#可以使源代码清晰</span></code></pre></div><p>2.基本元素</p><table><thead><tr><th>Tag</th><th>最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;表明开头和结尾</th></tr></thead><tbody><tr><td>Name</td><td>标签的名字，<p>…</p>的名字是‘p’，格式:<tag>.name</tag></td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式:<tag>.attrs</tag></td></tr><tr><td>NabigableString</td><td>标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式:<tag>.string</tag></td></tr><tr><td>Comment</td><td>标签内字符串的注释部分,一种特殊的Comment类型</td></tr></tbody></table><p>3.标签树的平行遍历</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML文本顺序的上一个平行节点标签</td></tr></tbody></table><p>4.获取href</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-comment"># 添加 headers</span>headers = &#123;    <span class="hljs-string">"User-Agent"</span>:..&#125;response = request.get(url,headers=headers)demo = response.text <span class="hljs-comment">#网站源代码</span><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoupsoup = BeautifulSoup(demo,<span class="hljs-string">'html.parser'</span>)<span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">'a'</span>):    print(link.get(<span class="hljs-string">'href'</span>))</code></pre></div><p>find_all相关方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果,字符串类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索,返回列表类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果,字符串类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索,返回列表类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果,字符串类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前序平行节点中搜索,返回列表类型,同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_previous_sibling()</td><td>在前序平行节点中返回一个结果,字符串类型,同.find_all()参数</td></tr></tbody></table><h2 id="scrapy-框架解析"><a class="markdownIt-Anchor" href="#scrapy-框架解析"></a> Scrapy 框架解析</h2><p>​<img src="/2020/09/04/Python%E7%88%AC%E8%99%AB%E5%92%8C%E6%AD%A3%E5%88%99/1.png" srcset="/img/loading.gif" class></p><table><thead><tr><th>requests</th><th>Scrapy</th></tr></thead><tbody><tr><td>页面级爬虫</td><td>网站级爬虫</td></tr><tr><td>功能库</td><td>框架</td></tr><tr><td>并发性考虑不足,性能较差</td><td>并发性好,性能较高</td></tr><tr><td>重点在于页面下载</td><td>重点在于爬虫结构</td></tr><tr><td>定制灵活</td><td>一般定制灵活,深度定制困难</td></tr><tr><td>上手十分简单</td><td>入门稍难</td></tr></tbody></table><p>Scrapy 常用命令</p><table><thead><tr><th>命令</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新工程</td><td>scrapy startproject<name>[dir]</name></td></tr><tr><td>genspider</td><td>创建一个爬虫</td><td>scrapy genspider [options] <name> <domain></domain></name></td></tr><tr><td>settings</td><td>获得爬虫配置信息</td><td>scrapy settings[options]</td></tr><tr><td>crawl</td><td>运行一个爬虫</td><td>scrapy crawl <spider></spider></td></tr><tr><td>list</td><td>列出工程中所有爬虫</td><td>scrapy list</td></tr><tr><td>shell</td><td>启动URL调试命</td><td>scrapy令行 shellurl</td></tr></tbody></table><p>Scrapy使用步骤</p><p>1.选择一个文件夹写项目 输入命令 scrapy startproject 项目名称</p><p>2.输入命令 scrapy genspider py名称 域名</p><p>3.再 py名称 中配置爬虫</p><p>4.输入命令 scrapy crawl py名称 运行爬虫</p><p>request 类</p><p>​<img src="/2020/09/04/Python%E7%88%AC%E8%99%AB%E5%92%8C%E6%AD%A3%E5%88%99/2.png" srcset="/img/loading.gif" class></p><p>respond 类</p><p>​<img src="/2020/09/04/Python%E7%88%AC%E8%99%AB%E5%92%8C%E6%AD%A3%E5%88%99/3.png" srcset="/img/loading.gif" class></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue文档学习</title>
    <link href="/2020/07/29/Vue%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/07/29/Vue%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="vue文档学习"><a class="markdownIt-Anchor" href="#vue文档学习"></a> Vue文档学习</h1><h2 id="vue是什么"><a class="markdownIt-Anchor" href="#vue是什么"></a> Vue是什么?</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><div class="hljs"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>或者直接用<code>vue-cli</code>脚手架安装</p><h2 id="声明氏渲染"><a class="markdownIt-Anchor" href="#声明氏渲染"></a> 声明氏渲染</h2><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    &#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data()&#123;<span class="actionscript">            <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">                msg:<span class="hljs-string">"hello world"</span></span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java项目开发(二)</title>
    <link href="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
    <url>/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql表设计"><a class="markdownIt-Anchor" href="#mysql表设计"></a> Mysql表设计</h1><h2 id="构建表"><a class="markdownIt-Anchor" href="#构建表"></a> 构建表</h2><p>…</p><h1 id="快速构建后台管理系统"><a class="markdownIt-Anchor" href="#快速构建后台管理系统"></a> 快速构建后台管理系统</h1><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p><strong>前端页面</strong></p><div class="hljs"><pre><code class="hljs css">git clone https://gitee.com/renrenio/renren-fast-vue.git</code></pre></div><p><strong>后端代码</strong></p><div class="hljs"><pre><code class="hljs css">git clone https://gitee.com/renrenio/renren-fast.git</code></pre></div><p><strong>构建<code>admin</code>数据库</strong></p><p>利用<code>navicat</code>创建一个<code>gulimall_admin</code>数据库</p><h2 id="配置后端代码"><a class="markdownIt-Anchor" href="#配置后端代码"></a> 配置后端代码</h2><p>将<code>reren-fast</code>文件夹放入项目根目录,接着导入<code>db</code>目录下的<code>mysql.sql</code>到刚刚创建的数据库表中</p><p>在根目录的<code>pom.yml</code>中添加<code>&lt;module&gt;renren-fast&lt;/module&gt;</code>再刷新maven</p><h3 id="mysql连接配置"><a class="markdownIt-Anchor" href="#mysql连接配置"></a> mysql连接配置</h3><p>找到目录<code>/renren-fast/src/main/resources/application-dev.yml</code>进行相关配置,将<code>ip:port</code>和数据库名称修改并填写<code>mysql的账号密码</code></p><p>​<img src="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/1.png" srcset="/img/loading.gif" class></p><h3 id="启动项目"><a class="markdownIt-Anchor" href="#启动项目"></a> 启动项目</h3><p>启动<code>RenrenApplication</code>,出现如下信息即启动成功</p><p>​<img src="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/2.png" srcset="/img/loading.gif" class></p><h2 id="配置前端代码"><a class="markdownIt-Anchor" href="#配置前端代码"></a> 配置前端代码</h2><p>将<code>renren-fast-vue</code>文件夹用<code>Vs code</code>打开</p><h3 id="配置环境"><a class="markdownIt-Anchor" href="#配置环境"></a> 配置环境</h3><p>打开终端安装node环境(node.js需要提前安装好,<strong>node需要10.x的版本</strong>)</p><p>node版本切换可查看 <a href="https://weiyalong.top/2020/07/18/NODEJS%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%92%8C%E5%88%87%E6%8D%A2/" target="_blank" rel="noopener">此博客</a></p><p>配置淘宝镜像<code>npm config set registry http://registry.npm.taobao.org/</code>再进行依赖安装</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">npm</span> <span class="hljs-selector-tag">install</span></code></pre></div><p>输入以上命令会根据文件夹中<code>package.json</code>文件中需要的依赖安装</p><h3 id="启动项目-2"><a class="markdownIt-Anchor" href="#启动项目-2"></a> 启动项目</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">npm</span> <span class="hljs-selector-tag">run</span> <span class="hljs-selector-tag">dev</span></code></pre></div><p>出现以下信息即启动成功</p><p>​<img src="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/3.png" srcset="/img/loading.gif" class></p><h2 id="账号密码"><a class="markdownIt-Anchor" href="#账号密码"></a> 账号密码</h2><p>默认<code>admin/admin</code></p><h1 id="代码生成器"><a class="markdownIt-Anchor" href="#代码生成器"></a> 代码生成器</h1><div class="hljs"><pre><code class="hljs css">git clone https://gitee.com/renrenio/renren-generator.git</code></pre></div><p>将目录导入到项目根目录并在<code>pom.yml</code>中配置<code>module</code></p><h2 id="配置mysql"><a class="markdownIt-Anchor" href="#配置mysql"></a> 配置Mysql</h2><p>在<code>application.yml</code>中配置<code>mysql</code>相关配置一个一个数据库的进行逆向工程搭建</p><p>修改<code>generator.properties</code>中的相关信息</p><p>​<img src="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/4.png" srcset="/img/loading.gif" class></p><p>然后运行打开网站,生成代码,将<code>main</code>文件复制到模块中</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>项目开发实例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java项目开发(一)</title>
    <link href="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
    <url>/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="项目文件配置"><a class="markdownIt-Anchor" href="#项目文件配置"></a> 项目文件配置</h1><h2 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> Maven</h2><p>在<code>conf/setting.xml</code>配置</p><h3 id="配置阿里云镜像"><a class="markdownIt-Anchor" href="#配置阿里云镜像"></a> 配置阿里云镜像</h3><div class="hljs"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">mirror</span>&gt;  &lt;id&gt;alimaven&lt;/id&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;name&gt;aliyun maven&lt;/name&gt;  &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;  &lt;/mirror&gt;</code></pre></div><h3 id="配置jdk编译"><a class="markdownIt-Anchor" href="#配置jdk编译"></a> 配置jdk编译</h3><div class="hljs"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">profile</span>&gt;  &lt;id&gt;jdk-1.8&lt;/id&gt;  &lt;<span class="hljs-selector-tag">activation</span>&gt;&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;&lt;jdk&gt;1.8&lt;/jdk&gt;  &lt;/activation&gt;  &lt;<span class="hljs-selector-tag">properties</span>&gt;&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;  &lt;/properties&gt;&lt;/profile&gt;</code></pre></div><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><h3 id="setting配置maven"><a class="markdownIt-Anchor" href="#setting配置maven"></a> Setting配置Maven</h3><p>​<img src="/2020/07/18/java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%B8%80)/setting.png" srcset="/img/loading.gif" class></p><h3 id="在plugins中安装插件"><a class="markdownIt-Anchor" href="#在plugins中安装插件"></a> 在Plugins中安装插件</h3><ol><li>lombok</li><li>mybatisx</li></ol><h2 id="vscode"><a class="markdownIt-Anchor" href="#vscode"></a> Vscode</h2><h3 id="安装插件方便开发"><a class="markdownIt-Anchor" href="#安装插件方便开发"></a> 安装插件(方便开发)</h3><ol><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Chinese</li><li>ESLint</li><li>HTML CSS Support</li><li>HTML Snippets</li><li>JavaScript (ES6) code snippets</li><li>Live Server</li><li>open in browser</li><li>Vetur</li></ol><h2 id="git配置"><a class="markdownIt-Anchor" href="#git配置"></a> git配置</h2><p>右键打开<code>git bash here</code></p><h3 id="配置基本信息"><a class="markdownIt-Anchor" href="#配置基本信息"></a> 配置基本信息</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">--global</span> <span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.name</span> "名字"<span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">--global</span> <span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.email</span> "邮箱"</code></pre></div><h3 id="创建秘钥"><a class="markdownIt-Anchor" href="#创建秘钥"></a> 创建秘钥</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">ssh-keygen</span> <span class="hljs-selector-tag">-t</span> <span class="hljs-selector-tag">rsa</span> <span class="hljs-selector-tag">-C</span> "邮箱"</code></pre></div><h1 id="创建项目微服务"><a class="markdownIt-Anchor" href="#创建项目微服务"></a> 创建项目微服务</h1><p>新建一个<code>Module</code> 选择<code>Spring Initializr</code></p><p>商品服务,仓储服务,订单服务,优惠券服务,用户服务</p><p>共同:</p><ol><li>需要有web,springrouting/openfeign</li><li>每一个服务包名<strong>com.atguigu.gulimall</strong>.xxx(product/order/ware/coupon/member)</li><li>模块名 : <strong>gulimall</strong>-xxx</li></ol><h2 id="根目录创建pomxml"><a class="markdownIt-Anchor" href="#根目录创建pomxml"></a> 根目录创建pom.xml</h2><p>输入以下内容聚合所有服务</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.gulimall<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gulimall<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>gulimall<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>聚合服务<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gulimall-coupon<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gulimall-member<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gulimall-order<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gulimall-ware<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gulimall-product<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><p>可以使用service中的<code>springboot</code>操作</p><h2 id="maven中添加新建的pomxml"><a class="markdownIt-Anchor" href="#maven中添加新建的pomxml"></a> maven中添加新建的pom.xml</h2><p>为了一起编译操作</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>项目开发实例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序开发问题汇总</title>
    <link href="/2020/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2020/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序开发问题汇总"><a class="markdownIt-Anchor" href="#小程序开发问题汇总"></a> 小程序开发问题汇总</h1><h2 id="多行文本省略问题"><a class="markdownIt-Anchor" href="#多行文本省略问题"></a> 多行文本省略问题</h2><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-id">#text-overflow</span>: <span class="hljs-selector-tag">ellipsis</span>;只对<span class="hljs-selector-tag">display</span>：<span class="hljs-selector-tag">inline</span>；起作用#多行显示用以下代码<span class="hljs-selector-tag">-webkit-line-clamp</span>确定省略的行数<span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">-o-ellipsis-lastline</span>;<span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>;<span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">ellipsis</span>;<span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">-webkit-box</span>;<span class="hljs-selector-tag">-webkit-line-clamp</span>: 2;<span class="hljs-selector-tag">line-clamp</span>: 2;<span class="hljs-selector-tag">-webkit-box-orient</span>: <span class="hljs-selector-tag">vertical</span>;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker介绍和演示</title>
    <link href="/2020/07/17/Docker%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%A4%BA/"/>
    <url>/2020/07/17/Docker%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="docker介绍"><a class="markdownIt-Anchor" href="#docker介绍"></a> Docker介绍</h1><p>docker相当于容器可以装好多个liunx</p><p>​<img src="/2020/07/17/Docker%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%A4%BA/1.png" srcset="/img/loading.gif" class></p><h1 id="docker安装mysql"><a class="markdownIt-Anchor" href="#docker安装mysql"></a> Docker安装mysql</h1><h3 id="使用阿里云镜像安装完docker"><a class="markdownIt-Anchor" href="#使用阿里云镜像安装完docker"></a> 使用阿里云镜像(安装完docker)</h3><p>您可以通过修改<code>daemon</code>配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p><div class="hljs"><pre><code class="hljs css">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123;  "registry-mirrors": ["https://jiwuvrmz.mirror.aliyuncs.com"]&#125;<span class="hljs-selector-tag">EOF</span><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">daemon-reload</span><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">docker</span></code></pre></div><h3 id="默认安装最新版本的mysql-latest"><a class="markdownIt-Anchor" href="#默认安装最新版本的mysql-latest"></a> 默认安装最新版本的mysql  (latest)</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">mysql</span></code></pre></div><h3 id="安装指定版本的mysql"><a class="markdownIt-Anchor" href="#安装指定版本的mysql"></a> 安装指定版本的mysql</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">mysql</span><span class="hljs-selector-pseudo">:8.0.20</span></code></pre></div><h3 id="安装mysql容器"><a class="markdownIt-Anchor" href="#安装mysql容器"></a> 安装mysql容器</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">run</span> <span class="hljs-selector-tag">-p</span> 3306<span class="hljs-selector-pseudo">:3306</span> <span class="hljs-selector-tag">--name</span> <span class="hljs-selector-tag">mysql</span> \-v /mydata/mysql/log:/var/log/mysql \-v /mydata/mysql/data:/var/lib/mysql \-v /mydata/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=root \<span class="hljs-selector-tag">-d</span> <span class="hljs-selector-tag">mysql</span><span class="hljs-selector-pseudo">:8.0.20</span></code></pre></div><h3 id="创建mysql配置文件"><a class="markdownIt-Anchor" href="#创建mysql配置文件"></a> 创建mysql配置文件</h3><p>在<code>/mydata/mysql/conf</code>目录下创建文件<code>my.cnf</code></p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-attr">[client]</span>default-character-set=utf8mb4<span class="hljs-selector-attr">[mysql]</span>default-character-set=utf8mb4<span class="hljs-selector-attr">[mysqld]</span>init_connect='SET collation_connection = utf8_unicode_ci'init_connect='SET NAMES utf8'character-set-server=utf8collation-server=utf8_unicode_ci<span class="hljs-selector-tag">skip-character-set-client-handshake</span><span class="hljs-selector-tag">skip-name-resolve</span>secure_file_priv=/var/lib/mysql <span class="hljs-selector-tag">skip-grant-tables</span>    #可以跳过登录<span class="hljs-selector-tag">mysql</span></code></pre></div><h3 id="重启容器"><a class="markdownIt-Anchor" href="#重启容器"></a> 重启容器</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">mysql</span></code></pre></div><h3 id="进入mysql容器linux系统"><a class="markdownIt-Anchor" href="#进入mysql容器linux系统"></a> 进入mysql容器(linux系统)</h3><div class="hljs"><pre><code class="hljs css">docker exec -it mysql /bin/bash</code></pre></div><h3 id="查看是否成功修改"><a class="markdownIt-Anchor" href="#查看是否成功修改"></a> 查看是否成功修改</h3><div class="hljs"><pre><code class="hljs css">cat /etc/mysql/my.cnf</code></pre></div><h3 id="设置mysql随着docker自启"><a class="markdownIt-Anchor" href="#设置mysql随着docker自启"></a> 设置mysql随着docker自启</h3><div class="hljs"><pre><code class="hljs css">docker update mysql --restart=alwaysdocker update redis --restart=always</code></pre></div><h3 id="mysql远程连接用户创建"><a class="markdownIt-Anchor" href="#mysql远程连接用户创建"></a> mysql远程连接用户创建</h3><div class="hljs"><pre><code class="hljs css">必须先创建用户（密码规则：<span class="hljs-selector-tag">mysql8</span><span class="hljs-selector-class">.0</span>以上密码策略限制必须要大小写加数字特殊符号）：<span class="hljs-selector-tag">mysql</span>&gt;<span class="hljs-selector-tag">create</span> <span class="hljs-selector-tag">user</span> <span class="hljs-selector-tag">orange</span>@'%' identified  by <span class="hljs-string">'密码'</span>;再进行赋值：<span class="hljs-selector-tag">mysql</span>&gt;<span class="hljs-selector-tag">grant</span> <span class="hljs-selector-tag">all</span> <span class="hljs-selector-tag">privileges</span> <span class="hljs-selector-tag">on</span> *.* <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">orange</span>@'%' with grant option;最后刷新一下：<span class="hljs-selector-tag">mysql</span>&gt;<span class="hljs-selector-tag">flush</span> <span class="hljs-selector-tag">privileges</span>;</code></pre></div><h2 id="docker-安装redis"><a class="markdownIt-Anchor" href="#docker-安装redis"></a> Docker 安装redis</h2><h3 id="安装redis镜像"><a class="markdownIt-Anchor" href="#安装redis镜像"></a> 安装redis镜像</h3><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">redis</span></code></pre></div><h3 id="创建实例并启动"><a class="markdownIt-Anchor" href="#创建实例并启动"></a> 创建实例并启动</h3><h4 id="首先创建配置文件和目录"><a class="markdownIt-Anchor" href="#首先创建配置文件和目录"></a> 首先创建配置文件和目录</h4><div class="hljs"><pre><code class="hljs css">mkdir -p /mydata/redis/conftouch /mydata/redis/conf/redis.conf</code></pre></div><h4 id="启动容器"><a class="markdownIt-Anchor" href="#启动容器"></a> 启动容器</h4><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">run</span> <span class="hljs-selector-tag">-p</span> 6379<span class="hljs-selector-pseudo">:6379</span> <span class="hljs-selector-tag">--name</span> <span class="hljs-selector-tag">redis</span> \-v /mydata/redis/data:/data \-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \-d redis redis-server /etc/redis/redis.conf</code></pre></div><h4 id="运行redis"><a class="markdownIt-Anchor" href="#运行redis"></a> 运行redis</h4><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">exec</span> <span class="hljs-selector-tag">-it</span> <span class="hljs-selector-tag">redis</span> <span class="hljs-selector-tag">redis-cli</span></code></pre></div><h4 id="开启-aof-持久化"><a class="markdownIt-Anchor" href="#开启-aof-持久化"></a> 开启 aof 持久化</h4><div class="hljs"><pre><code class="hljs css">vi /mydata/redis/conf/redis.conf# 添加如下内容<span class="hljs-selector-tag">appendonly</span> <span class="hljs-selector-tag">yes</span></code></pre></div><h4 id="重启redis"><a class="markdownIt-Anchor" href="#重启redis"></a> 重启redis</h4><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">redis</span></code></pre></div><h4 id="设置docker自启动"><a class="markdownIt-Anchor" href="#设置docker自启动"></a> 设置Docker自启动</h4><div class="hljs"><pre><code class="hljs css">docker update redis --restart=always</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python gui界面和pygame库</title>
    <link href="/2020/07/16/python-gui%E7%95%8C%E9%9D%A2%E5%92%8Cpygame%E5%BA%93/"/>
    <url>/2020/07/16/python-gui%E7%95%8C%E9%9D%A2%E5%92%8Cpygame%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="gui界面设计和pygame"><a class="markdownIt-Anchor" href="#gui界面设计和pygame"></a> gui界面设计和pygame</h1><h2 id="tkinter-库"><a class="markdownIt-Anchor" href="#tkinter-库"></a> tkinter 库</h2><h3 id="label-和button标签"><a class="markdownIt-Anchor" href="#label-和button标签"></a> Label 和Button标签</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>var = tk.StringVar() <span class="hljs-comment">#tk字符串变量</span>l = tk.Label(window,textvariable=var,bg=<span class="hljs-string">'green'</span>,font=(<span class="hljs-string">'Arial'</span>,<span class="hljs-number">12</span>),width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>) <span class="hljs-comment">#Label的配置</span>l.pack() <span class="hljs-comment">#放置Label标签</span>on_hit = <span class="hljs-literal">False</span><span class="hljs-comment">#设置点击事件</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hitMe</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">global</span> on_hit    <span class="hljs-keyword">if</span> on_hit == <span class="hljs-literal">False</span>:        on_hit = <span class="hljs-literal">True</span>        var.set(<span class="hljs-string">"you hit me"</span>)    <span class="hljs-keyword">else</span>:        on_hit = <span class="hljs-literal">False</span>        var.set(<span class="hljs-string">''</span>)bt = tk.Button(window,text=<span class="hljs-string">'hit me'</span>,width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>,command=hitMe) <span class="hljs-comment">#Button标签,command是事件方法</span>bt.pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="entry-和text-输入文本框"><a class="markdownIt-Anchor" href="#entry-和text-输入文本框"></a> Entry 和Text 输入,文本框</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>e = tk.Entry(window,show=<span class="hljs-literal">None</span>) <span class="hljs-comment">#show可以设置字符样式 例如*</span>e.pack()<span class="hljs-comment">#设置点击事件</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertPoint</span><span class="hljs-params">()</span>:</span>    var = e.get()    t.insert(<span class="hljs-string">'insert'</span>,var) <span class="hljs-comment">#设置insert方法</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertEnd</span><span class="hljs-params">()</span>:</span>    var = e.get()    t.insert(<span class="hljs-string">'end'</span>,var) <span class="hljs-comment">#插入到最后面</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertIndex</span><span class="hljs-params">()</span>:</span>    var = e.get()    t.insert(<span class="hljs-number">1.1</span>,var)  <span class="hljs-comment">#插入到第一行第二列</span>bt1 = tk.Button(window,text=<span class="hljs-string">'insert point'</span>,width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>,command=insertPoint) <span class="hljs-comment">#Button标签,command是事件方法</span>bt1.pack()bt2 = tk.Button(window,text=<span class="hljs-string">'insert end'</span> ,width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>,command=insertEnd)bt2.pack()bt3 = tk.Button(window,text=<span class="hljs-string">'insert index'</span>,width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>,command=insertIndex)bt3.pack()t = tk.Text(window,height=<span class="hljs-number">2</span>) <span class="hljs-comment">#Text标签</span>t.pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="listbox-列表组件"><a class="markdownIt-Anchor" href="#listbox-列表组件"></a> Listbox 列表组件</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>var1 = tk.StringVar()l = tk.Label(window,textvariable=var1,bg=<span class="hljs-string">'green'</span>,width=<span class="hljs-number">4</span>)l.pack()<span class="hljs-comment">#设置点击事件</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertPoint</span><span class="hljs-params">()</span>:</span>    value = lstBox.get(lstBox.curselection()) <span class="hljs-comment">#获取光标选定的值</span>    var1.set(value)bt1 = tk.Button(window,text=<span class="hljs-string">'print selection'</span>,width=<span class="hljs-number">15</span>,height=<span class="hljs-number">2</span>,command=insertPoint) <span class="hljs-comment">#Button标签,command是事件方法</span>bt1.pack()var2 = tk.StringVar()var2.set((<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>))lstBox = tk.Listbox(window,listvariable=var2) <span class="hljs-comment">#listBox标签,用listvariable定义list</span>lstBox.pack()<span class="hljs-comment">#插入listBox第二种方法</span>list_items = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> list_items:    lstBox.insert(<span class="hljs-string">'end'</span>,item)<span class="hljs-comment">#插入listBox第三种方法</span>lstBox.insert(<span class="hljs-number">1</span>,<span class="hljs-string">'first'</span>)lstBox.insert(<span class="hljs-number">2</span>,<span class="hljs-string">'second'</span>)<span class="hljs-comment"># lstBox.delete(1)</span>window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="radiobutton-选择按钮"><a class="markdownIt-Anchor" href="#radiobutton-选择按钮"></a> Radiobutton 选择按钮</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>var = tk.StringVar()l = tk.Label(window,text=<span class="hljs-string">'empty'</span>,bg=<span class="hljs-string">'green'</span>,width=<span class="hljs-number">20</span>)l.pack()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSelection</span><span class="hljs-params">()</span>:</span>    l.config(text=<span class="hljs-string">'you have selected '</span> + var.get())r1 = tk.Radiobutton(window,text=<span class="hljs-string">'Option A'</span>,variable=var,value=<span class="hljs-string">'A'</span>,command=printSelection) <span class="hljs-comment">#Radiobutton标签,将value赋值给variable,command是点击按钮方法</span>r1.pack()r2 = tk.Radiobutton(window,text=<span class="hljs-string">'Option B'</span>,variable=var,value=<span class="hljs-string">'B'</span>,command=printSelection) <span class="hljs-comment">#Radiobutton标签,将value赋值给variable</span>r2.pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="scale-尺度"><a class="markdownIt-Anchor" href="#scale-尺度"></a> Scale 尺度</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>var = tk.StringVar()l = tk.Label(window,text=<span class="hljs-string">'empty'</span>,bg=<span class="hljs-string">'green'</span>,width=<span class="hljs-number">20</span>)l.pack()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSelection</span><span class="hljs-params">(v)</span>:</span>    <span class="hljs-string">'''</span><span class="hljs-string">    :param v: value的值</span><span class="hljs-string">    :return: </span><span class="hljs-string">    '''</span>    l.config(text=<span class="hljs-string">'you have selected '</span> + v)s = tk.Scale(window,label=<span class="hljs-string">'try me'</span>,from_=<span class="hljs-number">5</span>,to=<span class="hljs-number">11</span>,orient=tk.HORIZONTAL,length=<span class="hljs-number">300</span>,showvalue=<span class="hljs-number">1</span>,tickinterval=<span class="hljs-number">3</span>,resolution=<span class="hljs-number">0.01</span>,command=printSelection) <span class="hljs-comment">#Scale标签,从5到10,横项的,长度300,是否显示0,步长3,精度0.01</span>s.pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="checkbutton-勾选项"><a class="markdownIt-Anchor" href="#checkbutton-勾选项"></a> Checkbutton 勾选项</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>var = tk.StringVar()l = tk.Label(window,text=<span class="hljs-string">'empty'</span>,bg=<span class="hljs-string">'green'</span>,width=<span class="hljs-number">20</span>)l.pack()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSelection</span><span class="hljs-params">()</span>:</span>    print(var1.get(),var2.get())    <span class="hljs-keyword">if</span> var1.get() == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> var2.get() == <span class="hljs-number">0</span>:        l.config(text=<span class="hljs-string">'I love only Python'</span>)    <span class="hljs-keyword">elif</span> var1.get() == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> var2.get() == <span class="hljs-number">1</span>:        l.config(text=<span class="hljs-string">'I love only C++'</span>)    <span class="hljs-keyword">elif</span> var1.get() == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> var2.get() == <span class="hljs-number">0</span>:        l.config(text=<span class="hljs-string">'I do not love either'</span>)    <span class="hljs-keyword">else</span>:        l.config(text=<span class="hljs-string">'I love both'</span>)var1 = tk.IntVar()var2 = tk.IntVar()c1 = tk.Checkbutton(window,text=<span class="hljs-string">'Python'</span>,variable=var1,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>,command=printSelection) <span class="hljs-comment">#Checkbutton标签,选中赋值var1为1,不选中为0</span>c2 = tk.Checkbutton(window,text=<span class="hljs-string">'C++'</span>,variable=var2,onvalue=<span class="hljs-number">1</span>,offvalue=<span class="hljs-number">0</span>,command=printSelection) <span class="hljs-comment">#Checkbutton标签,选中赋值var1为1,不选中为0</span>c1.pack()c2.pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="canvas-画布"><a class="markdownIt-Anchor" href="#canvas-画布"></a> Canvas 画布</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>canvas = tk.Canvas(window,bg=<span class="hljs-string">'blue'</span>,height=<span class="hljs-number">150</span>,width=<span class="hljs-number">300</span>,)image_file = tk.PhotoImage(file=<span class="hljs-string">'tk.gif'</span>) <span class="hljs-comment">#获取图片,只能是gif</span>image = canvas.create_image(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,anchor=<span class="hljs-string">'nw'</span>,image=image_file) <span class="hljs-comment">#创建图片,锚定的点为nw方向</span>x0,y0,x1,y1 = <span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>line = canvas.create_line(x0,y0,x1,y1) <span class="hljs-comment">#画线从(x0,y0)画到(x1,y1)</span>oval = canvas.create_oval(x0,y0,x1,y1,fill=<span class="hljs-string">'red'</span>) <span class="hljs-comment">#画圆</span>arc = canvas.create_arc(x0+<span class="hljs-number">30</span>,y0+<span class="hljs-number">30</span>,x1+<span class="hljs-number">30</span>,y1+<span class="hljs-number">30</span>,start=<span class="hljs-number">0</span>,extent=<span class="hljs-number">180</span>) <span class="hljs-comment">#扇形</span>rect = canvas.create_rectangle(<span class="hljs-number">200</span>,<span class="hljs-number">20</span>,<span class="hljs-number">200</span>+<span class="hljs-number">30</span>,<span class="hljs-number">20</span>+<span class="hljs-number">30</span>) <span class="hljs-comment">#矩形</span>canvas.pack()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveIt</span><span class="hljs-params">()</span>:</span>    canvas.move(rect,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">#移动平移0,下移2</span>b = tk.Button(window,text=<span class="hljs-string">'move'</span>,command=moveIt).pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="menubar-菜单"><a class="markdownIt-Anchor" href="#menubar-菜单"></a> Menubar 菜单</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>l = tk.Label(window,text=<span class="hljs-string">''</span>,bg=<span class="hljs-string">'green'</span>,width=<span class="hljs-number">20</span>)l.pack()count = <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doJob</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">global</span> count    l.config(text=<span class="hljs-string">'do'</span> + str(count))    count += <span class="hljs-number">1</span>menubar = tk.Menu(window) <span class="hljs-comment">#Menu标签</span>file_menu = tk.Menu(menubar,tearoff=<span class="hljs-number">0</span>) <span class="hljs-comment">#tearoff能否被分开</span>menubar.add_cascade(label=<span class="hljs-string">'File'</span>,menu=file_menu) <span class="hljs-comment">#将file_menu放在Menu上</span>file_menu.add_command(label=<span class="hljs-string">'New'</span>,command=doJob) <span class="hljs-comment">#增加菜单的功能</span>file_menu.add_command(label=<span class="hljs-string">'Open'</span>,command=doJob)file_menu.add_command(label=<span class="hljs-string">'Save'</span>,command=doJob)file_menu.add_separator() <span class="hljs-comment">#加一条分离线</span>file_menu.add_command(label=<span class="hljs-string">'Exit'</span>,command=window.quit)edit_menu = tk.Menu(menubar,tearoff=<span class="hljs-number">0</span>) <span class="hljs-comment">#tearoff能否被分开</span>menubar.add_cascade(label=<span class="hljs-string">'Edit'</span>,menu=edit_menu) <span class="hljs-comment">#将file_menu放在Menu上</span>edit_menu.add_command(label=<span class="hljs-string">'Cut'</span>,command=doJob) <span class="hljs-comment">#增加菜单的功能</span>edit_menu.add_command(label=<span class="hljs-string">'Copy'</span>,command=doJob)edit_menu.add_command(label=<span class="hljs-string">'Paste'</span>,command=doJob)sub_menu = tk.Menu(menubar,tearoff=<span class="hljs-number">0</span>) <span class="hljs-comment">#file_menu中的分支</span>file_menu.add_cascade(label=<span class="hljs-string">'Import'</span>,menu=sub_menu,underline=<span class="hljs-number">0</span>)sub_menu.add_command(label=<span class="hljs-string">'Submenu1'</span>,command=doJob)window.config(menu=menubar)window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="frame-框架布局"><a class="markdownIt-Anchor" href="#frame-框架布局"></a> Frame 框架布局</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span>tk.Label(window,text=<span class="hljs-string">'on the window'</span>).pack()frm = tk.Frame(window) <span class="hljs-comment">#创建一个frame</span>frm.pack()frm_left = tk.Frame(frm) <span class="hljs-comment">#将frm_left放在frm中</span>frm_right = tk.Frame(frm)frm_left.pack(side=<span class="hljs-string">'left'</span>)   <span class="hljs-comment">#放在左边</span>frm_right.pack(side=<span class="hljs-string">'right'</span>)tk.Label(frm_left,text=<span class="hljs-string">'on the frm_l1'</span>).pack()tk.Label(frm_left,text=<span class="hljs-string">'on the frm_l2'</span>).pack()tk.Label(frm_right,text=<span class="hljs-string">'on the frm_r1'</span>).pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="messagebox-弹窗"><a class="markdownIt-Anchor" href="#messagebox-弹窗"></a> Messagebox 弹窗</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> messagebox<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hitMe</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># tk.messagebox.showinfo(title='hi',message='哈哈哈') #弹窗</span>    <span class="hljs-comment"># tk.messagebox.showwarning(title='hi',message='no') #警告</span>    <span class="hljs-comment"># tk.messagebox.showerror(title='hi',message='哈哈哈') #程序不能运行</span>    <span class="hljs-comment"># tk.messagebox.askquestion(title='hi',message='哈哈哈') #return yes or no</span>    <span class="hljs-comment"># r = tk.messagebox.askyesno(title='hi',message='哈哈哈') #return True or False</span>    <span class="hljs-comment"># tk.messagebox.askretrycancel(title='hi',message='哈哈哈') #return True or False</span>    tk.messagebox.askyesnocancel(title=<span class="hljs-string">'hi'</span>,message=<span class="hljs-string">'哈哈哈'</span>) <span class="hljs-comment">#return True or False</span>tk.Button(window,text=<span class="hljs-string">'hit me'</span>,command=hitMe).pack()window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="pack-grid-place-放置位置"><a class="markdownIt-Anchor" href="#pack-grid-place-放置位置"></a> pack grid place 放置位置</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> messagebox<span class="hljs-comment">#界面配置</span>window = tk.Tk() <span class="hljs-comment">#设置一个window界面</span>window.title(<span class="hljs-string">'my window'</span>) <span class="hljs-comment">#设置界面标题</span>window.geometry(<span class="hljs-string">'300x300'</span>) <span class="hljs-comment">#设置界面大小300x300像素</span><span class="hljs-comment">#pack用法</span><span class="hljs-comment"># tk.Label(window,bg='green',text=1).pack(side='top')</span><span class="hljs-comment"># tk.Label(window,bg='green',text=1).pack(side='bottom')</span><span class="hljs-comment"># tk.Label(window,bg='green',text=1).pack(side='left')</span><span class="hljs-comment"># tk.Label(window,bg='green',text=1).pack(side='right')</span><span class="hljs-comment">#grid用法</span><span class="hljs-comment"># for i in range(4):</span><span class="hljs-comment">#     for j in range(3):</span><span class="hljs-comment">#         tk.Label(window,bg='green',text=1).grid(row=i,column=j,padx=10,pady=10)#间隔</span><span class="hljs-comment">#place用法</span>tk.Label(window,bg=<span class="hljs-string">'green'</span>,text=<span class="hljs-number">1</span>).place(x=<span class="hljs-number">10</span>,y=<span class="hljs-number">100</span>,anchor=<span class="hljs-string">'nw'</span>)window.mainloop() <span class="hljs-comment">#不断刷新界面</span></code></pre></div><h3 id="登录实例"><a class="markdownIt-Anchor" href="#登录实例"></a> 登录实例</h3><h2 id="pygame-库"><a class="markdownIt-Anchor" href="#pygame-库"></a> pygame 库</h2><h3 id="相关对象"><a class="markdownIt-Anchor" href="#相关对象"></a> 相关对象</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#屏幕尺寸和模式</span>pygame.display.set_mode(size) <span class="hljs-comment">#设置窗口大小</span><span class="hljs-comment">#一个参数设置大小</span>    <span class="hljs-comment">#另一个参数设置屏幕模式</span>    pygame.RESIZABLE <span class="hljs-comment">#可调节</span>        pygame.FULLSCREEN <span class="hljs-comment">#全屏</span>        pygame.NOFRAME <span class="hljs-comment">#无边框</span>pygame.display.Info() <span class="hljs-comment">#生成屏幕相关信息,return 分辨率xXy</span><span class="hljs-comment">#对象有</span>    current_w <span class="hljs-comment">#横</span>    current_h <span class="hljs-comment">#纵</span><span class="hljs-comment">#窗口图标和标题</span>pygame.display.set_icon() <span class="hljs-comment">#设置图标信息</span>pygame.display.set_caption() <span class="hljs-comment">#设置窗口标题 </span>pygame.display.get_caption() <span class="hljs-comment">#获得标题和小标题(title,icontitle)</span><span class="hljs-comment">#窗口感知和刷新</span>pygame.display.get_active() <span class="hljs-comment">#当窗口在系统中显示时返回True or False</span>pygame.display.filp() <span class="hljs-comment">#重新绘制整个屏幕对应的窗口</span>pygame.display.update() <span class="hljs-comment">#刷新屏幕</span><span class="hljs-comment">#事件 event.type</span>pygame.KEYDOWN <span class="hljs-comment">#键盘事件 返回event.key,event.unicode编码,event.mod修饰符</span>pygame.k_UP    pygame.k_DOWN    pygame.k_LEFT    pygame.k_RIGHTpygame.QUIT <span class="hljs-comment">#退出事件 </span>pygame.VIDEORESIZE <span class="hljs-comment">#窗口大小更改事件 返回event.size</span>pygame.size[<span class="hljs-number">0</span>] <span class="hljs-comment">#宽度</span>    pygame.size[<span class="hljs-number">1</span>] <span class="hljs-comment">#高度</span>pygame.image.load(<span class="hljs-string">'ball.gif'</span>) <span class="hljs-comment">#加载图片</span>get_rect() <span class="hljs-comment">#使得图片对象有一个矩形边</span>fclock = pygame.time.Clock() <span class="hljs-comment">#用于操作时间</span>fclock.tick(fps) <span class="hljs-comment">#控制帧的刷新速度每秒进行fps次帧</span>screen.fill(BLACK)  <span class="hljs-comment">#填充黑色</span>screen.blit(ball,ballrect) <span class="hljs-comment">#将ball图像绘制到ballrect上</span>pygame.KEYDOWN <span class="hljs-comment">#键盘敲击事件</span><span class="hljs-comment">#处理事件</span>pygame.event.get()pygame.event.poll()pygame.event.clear()<span class="hljs-comment">#操作事件队列</span>pygame.event.set_blocked(type <span class="hljs-keyword">or</span> typelist) <span class="hljs-comment">#控制事件不允许保存到事件队列中</span>pygame.event.get_blocked(type) <span class="hljs-comment">#判断事件是否被禁止,返回True or False</span>pygame.event.set_allowed(type <span class="hljs-keyword">or</span> typelist) <span class="hljs-comment">#控制事件允许保存到事件队列中</span><span class="hljs-comment">#生成事件</span>pygame.event.post(Event) <span class="hljs-comment">#产生一个事件放入事件队列,一般用于用户自定义事件(pygame.USEREVENT)</span>pygame.event.Event(type,dict) <span class="hljs-comment">#创建给定类型的事件</span><span class="hljs-comment">#鼠标事件</span>pygame.event.MOUSEMOTION <span class="hljs-comment">#鼠标移动事件</span>event.pos <span class="hljs-comment">#鼠标当前坐标(x,y),相对于窗口左上角</span>    event.rel <span class="hljs-comment">#鼠标相对运动距离(x,y),相当于上次事件</span>    event.buttons <span class="hljs-comment">#鼠标移动的三个键状态对应位置值为1反之为0</span>pygame.event.MOUSEBUTTONUP <span class="hljs-comment">#鼠标释放事件</span>event.pos <span class="hljs-comment">#鼠标当前坐标(x,y),相对于窗口左上角</span>    event.button <span class="hljs-comment">#鼠标的键分别对应0/1/2</span>pygame.event.MOUSEBUTTONDOWN <span class="hljs-comment">#鼠标键按下事件</span>event.pos <span class="hljs-comment">#鼠标当前坐标(x,y),相对于窗口左上角</span>    event.button <span class="hljs-comment">#鼠标的键左键为1,右键为3</span><span class="hljs-comment">#颜色</span>pygame.Color(rgba <span class="hljs-keyword">or</span> color) <span class="hljs-comment">#a可选 默认255 不透明为0</span>.r <span class="hljs-comment">#红色通道 0-255</span>    .g <span class="hljs-comment">#绿色通道 0-255</span>.b <span class="hljs-comment">#蓝色通道 0-255</span>    <span class="hljs-comment">#图形绘制机制</span>pygame.Rect() <span class="hljs-comment">#返回(left,top) width height</span>.copy()    .move() <span class="hljs-comment">#移动,传入速度</span>    .inflate()    .clamp()    .clip()    .union()    .unionall()    .fit()    .normalize()    <span class="hljs-comment">#详情可参考http://www.pygame.org/docs/ref/rect.html</span>pygame.draw .rect() <span class="hljs-comment">#矩形</span>    <span class="hljs-comment">#参数</span>        Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>        Rect <span class="hljs-comment">#矩形绘制的区域</span>        width <span class="hljs-comment">#绘制边缘的宽度,默认为0,即填充图形</span>    .line() <span class="hljs-comment">#直线</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>        (start_pos,end_pos) <span class="hljs-comment">#直线起始坐标</span>        width <span class="hljs-comment">#直线的宽度,默认为1</span>    .polygon() <span class="hljs-comment">#多边形</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>        pointlist <span class="hljs-comment">#多变形顶点坐标列表</span>        width <span class="hljs-comment">#绘制边缘的宽度,默认为0,即填充图形</span>    .circle() <span class="hljs-comment">#圆形</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>    pos <span class="hljs-comment">#圆心坐标</span>        radius <span class="hljs-comment">#半径</span>        width    .ellipse() <span class="hljs-comment">#椭圆形</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>    Rect <span class="hljs-comment">#矩形绘制的区域</span>        width    .arc() <span class="hljs-comment">#椭圆弧形</span>    .lines() <span class="hljs-comment">#连续多线</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>        closed <span class="hljs-comment">#如果为True,起止节点自动增加封闭直线</span>        postlist <span class="hljs-comment">#直线起始坐标列表</span>        width <span class="hljs-comment">#直线的宽度,默认为1</span>    .aaline() <span class="hljs-comment">#无锯齿线</span>    .aalines() <span class="hljs-comment">#连续无锯齿线</span>    Surface <span class="hljs-comment">#矩形绘制的屏幕</span>        Color <span class="hljs-comment">#矩形绘制的颜色</span>        closed <span class="hljs-comment">#如果为True,起止节点自动增加封闭直线</span>        postlist <span class="hljs-comment">#直线起始坐标列表</span>        blend = <span class="hljs-number">1</span> <span class="hljs-comment">#不为0时,线条所在的背景颜色进行混合</span><span class="hljs-comment">#文字绘制机制</span>pygame.freetype <span class="hljs-comment">#需要额外impot</span>pygame.freetype.Font(字体路径,大小) <span class="hljs-comment">#生成字体对象</span>.render_to() <span class="hljs-comment">#返回Rect对象</span>    <span class="hljs-comment">#参数</span>        surf <span class="hljs-comment">#绘制字体的屏幕</span>        dest <span class="hljs-comment">#具体位置(x,y)</span>        text <span class="hljs-comment">#绘制的文字内容</span>        fgcolor <span class="hljs-comment">#文字颜色</span>        bgcolor <span class="hljs-comment">#背景颜色</span>        rotation <span class="hljs-comment">#逆时针旋转角度</span>        size <span class="hljs-comment">#字体大小</span>    .render() <span class="hljs-comment">#绘制具体文字 返回Rect和Surface对象</span>    <span class="hljs-comment">#参数</span>        text <span class="hljs-comment">#文字内容</span>        fgcolor,bgcolor        rotation        size</code></pre></div><h3 id="pygame最小开发框架"><a class="markdownIt-Anchor" href="#pygame最小开发框架"></a> pygame最小开发框架</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> pygame,syspygame.init() <span class="hljs-comment">#初始化游戏设置</span>screen = pygame.display.set_mode((<span class="hljs-number">600</span>,<span class="hljs-number">400</span>)) <span class="hljs-comment">#设置屏幕大小</span>pygame.display.set_caption(<span class="hljs-string">'游戏开发之旅'</span>) <span class="hljs-comment">#设置标题</span><span class="hljs-comment">#实现事件无线循环,直到游戏退出</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():        <span class="hljs-keyword">if</span> event.type == pygame.QUIT:            sys.exit()    pygame.display.update()</code></pre></div><h3 id="小球碰壁"><a class="markdownIt-Anchor" href="#小球碰壁"></a> 小球碰壁</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><span class="hljs-keyword">import</span> pygame,sys<span class="hljs-comment">#游戏初始化</span>pygame.init() <span class="hljs-comment">#初始化游戏设置</span>size = width,height = <span class="hljs-number">600</span>,<span class="hljs-number">400</span>speed = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]print(speed[<span class="hljs-number">0</span>])BLACK = <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>still = <span class="hljs-literal">False</span>bgcolor = pygame.Color(<span class="hljs-string">'black'</span>)screen = pygame.display.set_mode(size,pygame.RESIZABLE) <span class="hljs-comment">#设置屏幕大小</span>pygame.display.set_caption(<span class="hljs-string">'小球碰壁'</span>) <span class="hljs-comment">#设置标题</span>ball = pygame.image.load(<span class="hljs-string">'ball.gif'</span>)icon = pygame.image.load(<span class="hljs-string">'ball.gif'</span>)pygame.display.set_icon(icon)ballrect = ball.get_rect()fps =<span class="hljs-number">300</span>fclock = pygame.time.Clock() <span class="hljs-comment">#用于操作时间</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RGBChannel</span><span class="hljs-params">(a)</span>:</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> a&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (<span class="hljs-number">255</span> <span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">255</span> <span class="hljs-keyword">else</span> int(a))<span class="hljs-comment">#实现事件无线循环,直到游戏退出</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-comment">#事件</span>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():        <span class="hljs-keyword">if</span> event.type == pygame.QUIT:            sys.exit()        <span class="hljs-keyword">elif</span> event.type == pygame.KEYDOWN:            <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:                speed[<span class="hljs-number">0</span>] = speed[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> speed[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (abs(speed[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>) * int(speed[<span class="hljs-number">0</span>]/abs(speed[<span class="hljs-number">0</span>]))            <span class="hljs-keyword">elif</span> event.key == pygame.K_RIGHT:                speed[<span class="hljs-number">0</span>] = speed[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> speed[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> speed[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> event.key == pygame.K_UP:                speed[<span class="hljs-number">1</span>] = speed[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> speed[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> speed[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> event.key == pygame.K_DOWN:                speed[<span class="hljs-number">1</span>] = speed[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> speed[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (abs(speed[<span class="hljs-number">1</span>]) - <span class="hljs-number">1</span>) * int(speed[<span class="hljs-number">1</span>]/abs(speed[<span class="hljs-number">1</span>]))            <span class="hljs-keyword">elif</span> event.key == pygame.K_ESCAPE:                sys.exit()        <span class="hljs-keyword">elif</span> event.type == pygame.VIDEORESIZE:            size = width,height = event.size[<span class="hljs-number">0</span>],event.size[<span class="hljs-number">1</span>]            screen = pygame.display.set_mode(size,pygame.RESIZABLE)        <span class="hljs-keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:            <span class="hljs-keyword">if</span> event.button == <span class="hljs-number">1</span>:                still = <span class="hljs-literal">True</span>        <span class="hljs-keyword">elif</span> event.type == pygame.MOUSEBUTTONUP:            still = <span class="hljs-literal">False</span>            <span class="hljs-keyword">if</span> event.button == <span class="hljs-number">1</span>:                ballrect = ballrect.move(event.pos[<span class="hljs-number">0</span>] - ballrect.left,event.pos[<span class="hljs-number">1</span>] - ballrect.top)        <span class="hljs-keyword">elif</span> event.type == pygame.MOUSEMOTION:            ballrect = ballrect.move(event.pos[<span class="hljs-number">0</span>] - ballrect.left,event.pos[<span class="hljs-number">1</span>] - ballrect.top)    <span class="hljs-keyword">if</span> pygame.display.get_active() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> still:        ballrect = ballrect.move(speed[<span class="hljs-number">0</span>],speed[<span class="hljs-number">1</span>]) <span class="hljs-comment">#移动</span>    <span class="hljs-keyword">if</span> ballrect.left &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> ballrect.right &gt; width:        speed[<span class="hljs-number">0</span>] = -speed[<span class="hljs-number">0</span>]        <span class="hljs-keyword">if</span> ballrect.right &gt; width <span class="hljs-keyword">and</span> ballrect.right + speed[<span class="hljs-number">0</span>] &gt; ballrect.right:            speed[<span class="hljs-number">0</span>] = -speed[<span class="hljs-number">0</span>]    <span class="hljs-keyword">if</span> ballrect.top &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> ballrect.bottom &gt; height:        speed[<span class="hljs-number">1</span>] = -speed[<span class="hljs-number">1</span>]        <span class="hljs-keyword">if</span> ballrect.bottom &gt; height <span class="hljs-keyword">and</span> ballrect.bottom + speed[<span class="hljs-number">1</span>] &gt; ballrect.bottom:            speed[<span class="hljs-number">1</span>] = -speed[<span class="hljs-number">1</span>]    bgcolor.r = RGBChannel(ballrect.left*<span class="hljs-number">255</span>/width)    bgcolor.g = RGBChannel(ballrect.top*<span class="hljs-number">255</span>/height)    bgcolor.b = RGBChannel(min(speed[<span class="hljs-number">0</span>],speed[<span class="hljs-number">1</span>])*<span class="hljs-number">255</span>/max(speed[<span class="hljs-number">0</span>],speed[<span class="hljs-number">1</span>],<span class="hljs-number">1</span>))    screen.fill(bgcolor)  <span class="hljs-comment">#填充黑色</span>    screen.blit(ball,ballrect) <span class="hljs-comment">#将ball图像绘制到ballrect上</span>    pygame.display.update()    fclock.tick(fps) <span class="hljs-comment">#控制帧的刷新速度每秒进行fps次帧</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Gui界面</tag>
      
      <tag>Pygame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django rest framework</title>
    <link href="/2020/07/16/Django-rest-framework/"/>
    <url>/2020/07/16/Django-rest-framework/</url>
    
    <content type="html"><![CDATA[<h1 id="django-rest-framework"><a class="markdownIt-Anchor" href="#django-rest-framework"></a> Django rest framework</h1><h2 id="基础构建"><a class="markdownIt-Anchor" href="#基础构建"></a> 基础构建</h2><p>首先startapp api</p><p>接着将rest_framework,api注册到app中</p><p>之后</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PERMISSION_CLASSES'</span>: [        <span class="hljs-string">'rest_framework.permissions.IsAdminUser'</span>,    ], <span class="hljs-comment">#配置全局权限</span>    <span class="hljs-string">'DEFAULT_AUTHENTICATION_CLASSES'</span>:[], <span class="hljs-comment">#配置全局认证</span>    <span class="hljs-string">'PAGE_SIZE'</span>: <span class="hljs-number">10</span>&#125;<span class="hljs-comment">#局部的view.py可以设置空的认证</span>authentication_classes = []</code></pre></div><h2 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h2><p>CBV 模式</p><p>请求进来先执行dispatch,接着执行请求方式</p><h3 id="token-实现基本认证"><a class="markdownIt-Anchor" href="#token-实现基本认证"></a> token 实现基本认证</h3><div class="hljs"><pre><code class="hljs python">首先要创建两张表<span class="hljs-comment">#view.py</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BasicAuthentication<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<span class="hljs-keyword">import</span> json<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_token_code</span><span class="hljs-params">(username)</span>:</span>    <span class="hljs-string">"""</span><span class="hljs-string">    根据用户名和时间戳来生成永不相同的token随机字符串</span><span class="hljs-string">    :param username: 字符串格式的用户名</span><span class="hljs-string">    :return: 字符串格式的Token</span><span class="hljs-string">    """</span>    <span class="hljs-keyword">import</span> time    <span class="hljs-keyword">import</span> hashlib    timestamp = str(time.time())    m = hashlib.md5(username.encode(<span class="hljs-string">"utf-8"</span>))    <span class="hljs-comment"># md5 要传入字节类型的数据</span>    m.update(timestamp.encode(<span class="hljs-string">"utf-8"</span>))    <span class="hljs-keyword">return</span> m.hexdigest()  <span class="hljs-comment"># 将生成的随机字符串返回</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    authentication_classes = [MyAuthentication,]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span>        ret = &#123;            <span class="hljs-string">'code'</span>:<span class="hljs-number">1000</span>,            <span class="hljs-string">'msg'</span>:<span class="hljs-string">'xxx'</span>        &#125;        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(ret))    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthView</span><span class="hljs-params">(APIView)</span>:</span><span class="hljs-string">'''</span><span class="hljs-string">用户登录</span><span class="hljs-string">'''</span>    authentication_classes = []    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        data = request.POST        print(data)        username = data[<span class="hljs-string">'username'</span>]        password = data[<span class="hljs-string">'password'</span>]        user = models.User.objects.filter(username=username,password=password).first()        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">'code'</span>:<span class="hljs-number">1002</span>,<span class="hljs-string">'message'</span>:<span class="hljs-string">'登录失败'</span>&#125;))        <span class="hljs-keyword">else</span>:            res = &#123;<span class="hljs-string">'code'</span>:<span class="hljs-number">1000</span>&#125;            token = get_token_code(username)            models.UserToken.objects.update_or_create(user=user,defaults=&#123;<span class="hljs-string">"token"</span>:token&#125;)            res[<span class="hljs-string">'token'</span>] = token            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(res))</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#auth.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<span class="hljs-keyword">from</span> users <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAuthentication</span><span class="hljs-params">(BaseAuthentication)</span>:</span>    <span class="hljs-string">'''</span><span class="hljs-string">    用户认证</span><span class="hljs-string">    '''</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(self, request)</span>:</span>        meth = request.method        token = request.data.get(<span class="hljs-string">'token'</span>)  <span class="hljs-comment"># _request是原生的request</span>        token_obj = models.UserToken.objects.filter(token=token).first()        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(<span class="hljs-string">'用户认证失败'</span>)        <span class="hljs-keyword">return</span> (token_obj.user,token)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(self, val)</span>:</span>        <span class="hljs-keyword">pass</span></code></pre></div><h2 id="权限"><a class="markdownIt-Anchor" href="#权限"></a> 权限</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#permisssion.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> permissions<span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPermission</span><span class="hljs-params">(BasePermission)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_permission</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-keyword">if</span> request.user.gender == <span class="hljs-string">'女'</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <span class="hljs-comment">#无权限</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-comment">#有权限</span></code></pre></div><h2 id="频率"><a class="markdownIt-Anchor" href="#频率"></a> 频率</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#throttle.py</span><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> BaseThrottle<span class="hljs-keyword">import</span> timeVISIT_RECORD = &#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthThrottle</span><span class="hljs-params">(BaseThrottle)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">allow_request</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-comment">#获取ip地址</span>        remote_addr = self.get_ident(request)        ctime = time.time()        <span class="hljs-keyword">if</span> remote_addr <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> VISIT_RECORD:            VISIT_RECORD[remote_addr] = [ctime,] <span class="hljs-comment">#将ip地址存入</span>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-comment">#return False 表示访问频率太高被限制</span>        history = VISIT_RECORD.get(remote_addr)        history.insert(<span class="hljs-number">0</span>,ctime)        <span class="hljs-keyword">while</span> history <span class="hljs-keyword">and</span> history[<span class="hljs-number">-1</span>] &lt; ctime - <span class="hljs-number">60</span>:            history.pop()        <span class="hljs-keyword">if</span> len(history) &lt; <span class="hljs-number">3</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wait</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''还需要等待多长时间'''</span>        ctime = time.time()        <span class="hljs-keyword">return</span> <span class="hljs-number">60</span> - (ctime - self.history[<span class="hljs-number">-1</span>])</code></pre></div><div class="hljs"><pre><code class="hljs python">内置访问频率<span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_THROTTLE_CLASSES'</span>:[],<span class="hljs-comment">#配置全局频率</span>    <span class="hljs-string">'DEFAULT_THROTTLE_RATES'</span>:&#123;        <span class="hljs-string">'wyc'</span>:<span class="hljs-string">'3/m'</span> <span class="hljs-comment">#每分钟三次 ,'wyc' 需要设置 scope</span>    &#125;,&#125;<span class="hljs-comment">#throttle.py</span><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThrottle</span><span class="hljs-params">(SimpleRateThrottle)</span>:</span>    scope = <span class="hljs-string">'wyc'</span> <span class="hljs-comment">#全局配置中的key</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache_key</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-keyword">return</span> self.get_ident(request)</code></pre></div><h2 id="版本"><a class="markdownIt-Anchor" href="#版本"></a> 版本</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">1.</span>通过get传参<span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_VERSION'</span>:<span class="hljs-string">'v1'</span>,    <span class="hljs-string">'ALLOWED_VERSION'</span>:[<span class="hljs-string">'v1'</span>,<span class="hljs-string">'v2'</span>],    <span class="hljs-string">'VERSION_PARAM'</span>:<span class="hljs-string">'version'</span>&#125;<span class="hljs-comment">#自定义</span><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> BaseVersioning<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParamVersion</span><span class="hljs-params">(BaseVersioning)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">determine_version</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span>        version = request.query_params.get(<span class="hljs-string">'version'</span>) <span class="hljs-comment">#传入version参数</span>        <span class="hljs-keyword">return</span> versionversioning_class = ParamVersion<span class="hljs-comment">#内置</span><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> QueryParameterVersioningversioning_class = QueryParameterVersioning</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">2.</span>通过路由<span class="hljs-comment">#urls.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_VERSIONING_CLASS'</span>:<span class="hljs-string">"rest_framework.versioning.URLPathVersioning"</span>,    <span class="hljs-string">'DEFAULT_VERSION'</span>:<span class="hljs-string">'v1'</span>,    <span class="hljs-string">'ALLOWED_VERSION'</span>:[<span class="hljs-string">'v1'</span>,<span class="hljs-string">'v2'</span>],    <span class="hljs-string">'VERSION_PARAM'</span>:<span class="hljs-string">'version'</span>&#125;</code></pre></div><h2 id="解析器"><a class="markdownIt-Anchor" href="#解析器"></a> 解析器</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#全局配置</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PARSER_CLASSES'</span>: [<span class="hljs-string">'rest_framework.parsers.JSONParser'</span>,<span class="hljs-string">'rest_framework.parsers.FormParser'</span>],    &#125;<span class="hljs-keyword">from</span> rest_framework.parsers <span class="hljs-keyword">import</span> JSONParser,FormParser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-params">()</span>:</span>     parser_classes = [JSONParser,FormParser]     <span class="hljs-string">'''</span><span class="hljs-string">     JSONParser:</span><span class="hljs-string">            允许用户发json格式数据</span><span class="hljs-string">            a.content-type:application/json</span><span class="hljs-string">            b.request.data获取数据</span><span class="hljs-string">       FormParser:</span><span class="hljs-string">       a.content-type:application/x-www-form-unlencoded头</span><span class="hljs-string">       b.可以用request.data获取数据</span><span class="hljs-string">     '''</span>在APIView中封装的request，就实现了请求数据的解析：对于GET请求的参数我们通过request.query_params来获取。对于POST请求、PUT请求的数据我们通过request.data来获取。</code></pre></div><h2 id="序列化"><a class="markdownIt-Anchor" href="#序列化"></a> 序列化</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#urls.py对单个数据查询</span>url(<span class="hljs-string">r'goods/(?P&lt;pk&gt;\d+)$'</span>,views.GoodsView.as_view()),<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        print(request.user,request.auth)        pk = kwargs.get(<span class="hljs-string">'pk'</span>)        goods = models.Goods.objects.filter(id=pk).first()        ser = serializer.GoodsSerializer(goods,many=<span class="hljs-literal">False</span>)        <span class="hljs-keyword">return</span> Response(ser.data)<span class="hljs-comment">#serializer.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<span class="hljs-keyword">from</span> users <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        models = models.Goods        fields = <span class="hljs-string">"__all__"</span>        depth = <span class="hljs-number">0</span> <span class="hljs-comment">#深度用来查看外键表的数据</span><span class="hljs-comment">#view.py</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span>        print(request.user,request.auth)        goods = models.Goods.objects.all()        ser = serializer.GoodsSerializer(goods,many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> Response(ser.data)<span class="hljs-comment">#校验</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span>    title = serializers.CharField(error_messages=&#123;<span class="hljs-string">'required'</span>:<span class="hljs-string">'标题不能为空'</span>&#125;)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        ser = serializer.GoodsSerializer(data=request.data)        <span class="hljs-keyword">if</span> ser.is_valid():            print(ser.validated_data)        <span class="hljs-keyword">else</span>:            print(ser.errors)</code></pre></div><h2 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#url.py</span>url(<span class="hljs-string">r'^good/$'</span>,views.GenView.as_view(&#123;<span class="hljs-string">'get'</span>:<span class="hljs-string">'list'</span>,<span class="hljs-string">'post'</span>:<span class="hljs-string">'create'</span>&#125;)),url(<span class="hljs-string">r'^good/(?P&lt;pk&gt;\d+)/$'</span>,views.GenView.as_view(&#123;<span class="hljs-string">'get'</span>:<span class="hljs-string">'retrieve'</span>,<span class="hljs-string">'put'</span>:<span class="hljs-string">'update'</span>,<span class="hljs-string">'delete'</span>:<span class="hljs-string">'destroy'</span>,<span class="hljs-string">'patch'</span>:<span class="hljs-string">'partial_update'</span>,<span class="hljs-string">'post'</span>:<span class="hljs-string">'create'</span>&#125;)),<span class="hljs-comment">#view.py</span><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<span class="hljs-keyword">from</span> rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenView</span><span class="hljs-params">(ModelViewSet)</span>:</span>    authentication_classes = []    queryset = models.Goods.objects.all()    serializer_class = serializer.GoodsSerializer    pagination_class = PageNumberPagination</code></pre></div><h2 id="路由"><a class="markdownIt-Anchor" href="#路由"></a> 路由</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#url.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r'good'</span>,views.GenView)urlpatterns = [    url(<span class="hljs-string">r''</span>,include(router.urls)) <span class="hljs-comment">#自动添加view相关的路由,四个</span>]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django基础配置和知识</title>
    <link href="/2020/07/15/Django%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/07/15/Django%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="django基础配置"><a class="markdownIt-Anchor" href="#django基础配置"></a> Django基础配置</h1><h2 id="新建的目录"><a class="markdownIt-Anchor" href="#新建的目录"></a> 新建的目录</h2><p>1.static 用来存放静态文件例如:js,css</p><p>2.log 用来存放日志文件</p><p>3.media 用来存放上传的文件</p><p>4.apps 用来存放各个app ,将apps右键设置Mark Directory as Resoruce Root方便引入app <a href="http://view.py" target="_blank" rel="noopener">view.py</a></p><hr><h2 id="settingpy"><a class="markdownIt-Anchor" href="#settingpy"></a> <a href="http://setting.py" target="_blank" rel="noopener">setting.py</a> 配置</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#中文配置</span><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><span class="hljs-comment">#static文件配置 </span>STATICFILES_DIRS=[    os.path.join(BASE_DIR,<span class="hljs-string">"static"</span>)]<span class="hljs-comment">#apps文件配置</span>sys.path.insert(<span class="hljs-number">0</span>,os.path.join(BASE_DIR,<span class="hljs-string">'apps'</span>))<span class="hljs-comment">#数据库配置需要在文件__init__.py下</span><span class="hljs-keyword">import</span> pymysqlpymysql.install_as_MySQLdb()DATABASES = &#123;    <span class="hljs-string">"default"</span>: &#123;        <span class="hljs-string">"ENGINE"</span>: <span class="hljs-string">"django.db.backends.mysql"</span>,        <span class="hljs-string">"NAME"</span>: <span class="hljs-string">"missgoods"</span>,  <span class="hljs-comment"># 需要自己手动创建数据库</span>        <span class="hljs-string">"USER"</span>: <span class="hljs-string">"用户名"</span>,        <span class="hljs-string">"PASSWORD"</span>: <span class="hljs-string">"密码"</span>,        <span class="hljs-string">"HOST"</span>: <span class="hljs-string">"localhost"</span>,        <span class="hljs-string">"POST"</span>: <span class="hljs-number">3306</span>,        <span class="hljs-string">'OPTIONS'</span>: &#123;<span class="hljs-string">'charset'</span>:<span class="hljs-string">'utf8mb4'</span>&#125;    &#125;&#125;<span class="hljs-comment">#时区配置</span>TIME_ZONE = <span class="hljs-string">'Asia/Shanghai'</span>USE_TZ = <span class="hljs-literal">False</span><span class="hljs-comment">#restframework配置</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PERMISSION_CLASSES'</span>: [        <span class="hljs-string">'rest_framework.permissions.IsAdminUser'</span>,    ],    <span class="hljs-string">'PAGE_SIZE'</span>: <span class="hljs-number">10</span>&#125;<span class="hljs-comment">#media配置</span>MEDIA_ROOT = os.path.join(BASE_DIR,<span class="hljs-string">"media"</span>)MEDIA_URL = <span class="hljs-string">"/media/"</span><span class="hljs-comment">#需在url.py中配置</span><span class="hljs-keyword">from</span> django.conf.urls.static <span class="hljs-keyword">import</span> static<span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settingsurlpatterns + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</code></pre></div><hr><h2 id="users的设计"><a class="markdownIt-Anchor" href="#users的设计"></a> users的设计</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#1.创建一个users app</span><span class="hljs-comment">#2.设计model.py</span><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span><span class="hljs-params">(AbstractUser)</span>:</span>        nick_name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">"昵称"</span>,default=<span class="hljs-string">"管理员"</span>)        birthday = models.DateField(verbose_name=<span class="hljs-string">'生日'</span>,null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>)        gender = models.CharField(choices=((<span class="hljs-string">"男"</span>),(<span class="hljs-string">"女"</span>)),default=<span class="hljs-string">"女"</span>)        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>            verbose_name = <span class="hljs-string">"用户"</span>            verbose_name_plural = verbose_name<span class="hljs-comment">#3.配置setting.py</span>AUTH_USER_MODEL = <span class="hljs-string">"users.User"</span><span class="hljs-comment">#4.配置amdmin.py注册表</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin    <span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> User    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>        <span class="hljs-keyword">pass</span>admin.site.register(User,UserAdmin)<span class="hljs-comment">#ps:如果需要迁移数据库需要删除 django.contrib.admin 和 django.contrib.auth 中的migrations</span></code></pre></div><h2 id="managepy"><a class="markdownIt-Anchor" href="#managepy"></a> <a href="http://manage.py" target="_blank" rel="noopener">manage.py</a> 命令</h2><p>python <a href="http://manage.py" target="_blank" rel="noopener">manage.py</a> +</p><p>1.startapp [app名称]</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#setting.py中配置</span>INSTALLED_APPS = [    <span class="hljs-string">'app名称'</span>]</code></pre></div><p>2.runserver 运行项目</p><p>3.makemigrations [app名称]生成默认数据表</p><p>4.migrate [app名称]生成数据库</p><hr><h2 id="urlpy配置"><a class="markdownIt-Anchor" href="#urlpy配置"></a> url.py配置</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url,include<span class="hljs-keyword">from</span> django.conf.urls.static <span class="hljs-keyword">import</span> static<span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settingsurlpatterns = [    url(<span class="hljs-string">'admin/'</span>, admin.site.urls),    url(<span class="hljs-string">'/'</span>,include(<span class="hljs-string">'app名称.urls'</span>)),] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</code></pre></div><hr><h2 id="xadmin"><a class="markdownIt-Anchor" href="#xadmin"></a> xadmin</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#创建一个extra_apps</span><span class="hljs-comment">#放入xadmin源码</span><span class="hljs-comment">#url配置</span><span class="hljs-keyword">import</span> xadminurlpatterns = [    url(<span class="hljs-string">'xadmin/'</span>, xadmin.site.urls),]<span class="hljs-comment">#setting.py配置</span>INSTALLED_APPS = [    <span class="hljs-string">'xadmin'</span>,    <span class="hljs-string">'crispy_forms'</span>]<span class="hljs-comment">#进行makemigrations migrate</span><span class="hljs-comment">#注册model</span><span class="hljs-comment">#首先在app中创建一个adminx.py文件</span>    <span class="hljs-keyword">import</span> xadmin    <span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> model名称    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">model</span>名称<span class="hljs-title">Admin</span><span class="hljs-params">(Object)</span>:</span>        list_display = [<span class="hljs-string">'model属性'</span>] <span class="hljs-comment">#用来显示</span>        search_fields = [<span class="hljs-string">'model属性'</span>] <span class="hljs-comment">#用来搜索</span>        list_filter = [<span class="hljs-string">'model属性] #用来筛选</span><span class="hljs-string">        model_icon = '</span><span class="hljs-string">'  #设置左边的图标</span><span class="hljs-string">        ordering = ['</span>upTime<span class="hljs-string">'] #排序</span><span class="hljs-string">    xadmin.site.register(model名称,modelmingcAdmin) #注册</span><span class="hljs-string">  </span><span class="hljs-string">#全局配置</span><span class="hljs-string">#随便进入一个adminx.py文件配置</span><span class="hljs-string">    from xadmin import views</span><span class="hljs-string">        class BaseSetting(object):</span><span class="hljs-string">            enable_themes = True #主题功能</span><span class="hljs-string">            use_bootswatch = True</span><span class="hljs-string">        xadmin.site.register(views.BaseAdminView,BaseSetting)</span><span class="hljs-string"> </span><span class="hljs-string">        class GlobalSetting(object):</span><span class="hljs-string">            site_title = "智能物品招领" #最左上角的标题</span><span class="hljs-string">            site_footer = "招领"  #底部的标题</span><span class="hljs-string">        xadmin.site.register(views.CommAdminView,GlobalSetting)</span><span class="hljs-string">     #页面app的修改方式</span><span class="hljs-string">        #1.在apps.py中</span><span class="hljs-string">        class UsersConfig(AppConfig):</span><span class="hljs-string">            name = '</span>users<span class="hljs-string">'</span><span class="hljs-string">                verbose_name = "用户操作" #修改名称</span><span class="hljs-string">        #2.在app的__init__.py中</span><span class="hljs-string">            default_app_config ="users.apps.UsersConfig"</span></code></pre></div><h1 id="django-基础知识"><a class="markdownIt-Anchor" href="#django-基础知识"></a> Django 基础知识</h1><h2 id="orm与model"><a class="markdownIt-Anchor" href="#orm与model"></a> orm与model</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#model.py</span><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> 表名<span class="hljs-params">(models.Model)</span>:</span>        auto_now_add=<span class="hljs-literal">True</span> <span class="hljs-comment">#创建数据生成的时间</span>    AutoField(Field)        - int自增列，必须填入参数 primary_key=<span class="hljs-literal">True</span>    BigAutoField(AutoField)        - bigint自增列，必须填入参数 primary_key=<span class="hljs-literal">True</span>        注：当model中如果没有自增列，则自动会创建一个列名为id的列        <span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><span class="hljs-params">(models.Model)</span>:</span>            <span class="hljs-comment"># 自动创建一个列名为id的且为自增的整数列</span>            username = models.CharField(max_length=<span class="hljs-number">32</span>)        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Group</span><span class="hljs-params">(models.Model)</span>:</span>            <span class="hljs-comment"># 自定义自增列</span>            nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)            name = models.CharField(max_length=<span class="hljs-number">32</span>)    SmallIntegerField(IntegerField):        - 小整数 <span class="hljs-number">-32768</span> ～ <span class="hljs-number">32767</span>    PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)        - 正小整数 <span class="hljs-number">0</span> ～ <span class="hljs-number">32767</span>    IntegerField(Field)        - 整数列(有符号的) <span class="hljs-number">-2147483648</span> ～ <span class="hljs-number">2147483647</span>    PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)        - 正整数 <span class="hljs-number">0</span> ～ <span class="hljs-number">2147483647</span>    BigIntegerField(IntegerField):        - 长整型(有符号的) <span class="hljs-number">-9223372036854775808</span> ～ <span class="hljs-number">9223372036854775807</span>    BooleanField(Field)        - 布尔值类型    NullBooleanField(Field):        - 可以为空的布尔值    CharField(Field)        - 字符类型        - 必须提供max_length参数， max_length表示字符长度    TextField(Field)        - 文本类型    EmailField(CharField)：        - 字符串类型，Django Admin以及ModelForm中提供验证机制    IPAddressField(Field)        - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制    GenericIPAddressField(Field)        - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6        - 参数：            protocol，用于指定Ipv4或Ipv6， <span class="hljs-string">'both'</span>,<span class="hljs-string">"ipv4"</span>,<span class="hljs-string">"ipv6"</span>            unpack_ipv4， 如果指定为<span class="hljs-literal">True</span>，则输入::ffff:<span class="hljs-number">192.0</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>时候，可解析为<span class="hljs-number">192.0</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>，开启此功能，需要protocol=<span class="hljs-string">"both"</span>    URLField(CharField)        - 字符串类型，Django Admin以及ModelForm中提供验证 URL    SlugField(CharField)        - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）    CommaSeparatedIntegerField(CharField)        - 字符串类型，格式必须为逗号分割的数字    UUIDField(Field)        - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证    FilePathField(Field)        - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能        - 参数：                path,                      文件夹路径                match=<span class="hljs-literal">None</span>,                正则匹配                recursive=<span class="hljs-literal">False</span>,           递归下面的文件夹                allow_files=<span class="hljs-literal">True</span>,          允许文件                allow_folders=<span class="hljs-literal">False</span>,       允许文件夹    FileField(Field)        - 字符串，路径保存在数据库，文件上传到指定目录        - 参数：            upload_to = <span class="hljs-string">""</span>      上传文件的保存路径            storage = <span class="hljs-literal">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage    ImageField(FileField)        - 字符串，路径保存在数据库，文件上传到指定目录        - 参数：            upload_to = <span class="hljs-string">""</span>      上传文件的保存路径            storage = <span class="hljs-literal">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage            width_field=<span class="hljs-literal">None</span>,   上传图片的高度保存的数据库字段名（字符串）            height_field=<span class="hljs-literal">None</span>   上传图片的宽度保存的数据库字段名（字符串）    DateTimeField(DateField)        - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]    DateField(DateTimeCheckMixin, Field)        - 日期格式      YYYY-MM-DD    TimeField(DateTimeCheckMixin, Field)        - 时间格式      HH:MM[:ss[.uuuuuu]]    DurationField(Field)        - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型    FloatField(Field)        - 浮点型    DecimalField(Field)        - <span class="hljs-number">10</span>进制小数        - 参数：            max_digits，小数总长度            decimal_places，小数位长度    BinaryField(Field)        - 二进制类型    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        verbose_name = <span class="hljs-string">u"表名"</span>        verbose_name_plural = verbose_name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> self.属性名</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo +github+阿里云全站加速搭建个人博客</title>
    <link href="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h1><h2 id="11-准备工作"><a class="markdownIt-Anchor" href="#11-准备工作"></a> 1.1 准备工作</h2><ul><li><p>一个github账号</p></li><li><p>安装了 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 和 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>，使用npm</p></li><li><p>安装好git 之后，右键打开<code>git bash here</code>输入git信息，下面信息可以填你自己的</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">--global</span> <span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.email</span> "<span class="hljs-selector-tag">you</span><span class="hljs-keyword">@example</span>.com"git config --global user.name <span class="hljs-string">"Your Name"</span></code></pre></div></li></ul><h1 id="2-搭建博客"><a class="markdownIt-Anchor" href="#2-搭建博客"></a> 2. 搭建博客</h1><h2 id="21-创建github仓库"><a class="markdownIt-Anchor" href="#21-创建github仓库"></a> 2.1 创建GitHub仓库</h2><p>​在github里新建一个<code>你的用户名.github.io</code>的仓库，必须是你的GitHub用户名,不然无效，这样将来可以访问你的地址 <code>https://你的用户名.github.io</code></p><h2 id="22-全局安装hexo"><a class="markdownIt-Anchor" href="#22-全局安装hexo"></a> 2.2 全局安装hexo</h2><p>​你可以打开<code>git bash here</code>输入<code>npm install -g hexo-cli</code> 进行安装</p><h2 id="23-初始化一个hexo项目"><a class="markdownIt-Anchor" href="#23-初始化一个hexo项目"></a> 2.3 初始化一个hexo项目</h2><p>​可以在桌面上新建一个文件夹叫做<code>myblog</code>用于以后在里面写博客再上传到github里，然后打开这个文件夹的<code>cmd</code>如下所示（以下命令都是在这个<code>cmd</code>中操作）</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" srcset="/img/loading.gif" class></p><p>接着输入<code>hexo init</code>进行初始化项目,会生成如下目录</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png" srcset="/img/loading.gif" class></p><p>此时本地的仓库初始化完成了，你可以输入<code>hexo server</code>打开本地服务进行查看</p><h2 id="24-部署到github"><a class="markdownIt-Anchor" href="#24-部署到github"></a> 2.4 部署到github</h2><p>打开<code>_congig.yml</code>文件找到deploy进行如下配置：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">deploy</span>:  <span class="hljs-selector-tag">type</span>: <span class="hljs-selector-tag">git</span>  repo: https://github.com/你的github用户名/你的github用户名.github.io.git  <span class="hljs-selector-tag">branch</span>: <span class="hljs-selector-tag">master</span></code></pre></div><p>接着需要一个hexo插件来帮助我们推到github的仓库里面，安装插件：</p><div class="hljs"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></div><p>最后只要输入：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">clean</span><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">deploy</span></code></pre></div><p>第一个命令用于清除缓存，第二个用于上传github仓库期间可能需要你登录一个github账号密码，之后写md博客的时候都需要使用这两个命令，这时候就已经部署成功了，打开<code>https://你的用户名.github.io</code>就可以访问了</p><h2 id="25-更换主题皮肤"><a class="markdownIt-Anchor" href="#25-更换主题皮肤"></a> 2.5 更换主题皮肤</h2><p>在hexo官网找到自己喜欢的theme主题，然后git clone到目录的<code>theme</code>里面</p><p>然后将主题名称配置在<code>_congig.yml</code>文件中：</p><div class="hljs"><pre><code class="hljs css"># <span class="hljs-selector-tag">Extensions</span>## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/<span class="hljs-selector-tag">theme</span>: 安装的主题名称</code></pre></div><p>然后再利用<code>hexo clean</code>和<code>hexo deploy</code>上传到github里，之后本地进行的修改都要及时上传</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" srcset="/img/loading.gif" class></p><h1 id="3-阿里云全站加速"><a class="markdownIt-Anchor" href="#3-阿里云全站加速"></a> 3. 阿里云全站加速</h1><p>​为什么要使用阿里云全站加速呢，因为这样可以使得我们的博客访问的速度变得更快，当然觉得繁琐可以跳过这一部分</p><h2 id="31-准备工作"><a class="markdownIt-Anchor" href="#31-准备工作"></a> 3.1 准备工作</h2><ul><li>购买一个域名，用来映射github域名（需要备案）可以先用域名加速</li><li>用阿里云购买一个全站加速，按量收费即可，基本不花钱</li></ul><h2 id="32-使用全站加速"><a class="markdownIt-Anchor" href="#32-使用全站加速"></a> 3.2 使用全站加速</h2><ol><li><p>首先需要添加域名</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png" srcset="/img/loading.gif" class></p></li><li><p>域名填写你的域名</p></li><li><p>源站信息选择<code>IP</code>,填写如下信息</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png" srcset="/img/loading.gif" class></p></li></ol><p>上述信息是github的ip地址端口是443，需要填写四个，git pages会在这四个地址中变化</p><ol start="4"><li><p>解析域名</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png" srcset="/img/loading.gif" class></p><p>打开解析添加一条记录，<code>记录类型</code>选择<code>CNAME</code>，主机记录按照你加速的域名填，根据下表：</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" srcset="/img/loading.gif" class></p><p><code>记录值</code>是刚刚全站加速添加域名的<code>CNAME</code></p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png" srcset="/img/loading.gif" class></p></li></ol><p>之后添加即可。</p><ol start="5"><li>与github域名绑定</li></ol><p>在本地的<code>myblog</code>文件中的<code>source</code>目录创建一个<code>CNAME</code>文件，在里面用编辑器输入你在全站加速里面添加的域名。用<code>hexo deploy</code>上传到github就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker在linux系统安装</title>
    <link href="/2020/07/14/Docker%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <url>/2020/07/14/Docker%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="docker在linux系统安装"><a class="markdownIt-Anchor" href="#docker在linux系统安装"></a> Docker在linux系统安装</h1><h3 id="删除旧版本的docker目录文件"><a class="markdownIt-Anchor" href="#删除旧版本的docker目录文件"></a> 删除旧版本的docker目录文件</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre></div><h3 id="安装docker的仓库repository"><a class="markdownIt-Anchor" href="#安装docker的仓库repository"></a> 安装docker的仓库(repository)</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum install -y yum-utils</code></pre></div><div class="hljs"><pre><code class="hljs html">$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre></div><h3 id="下载docker驱动"><a class="markdownIt-Anchor" href="#下载docker驱动"></a> 下载docker驱动</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum install docker-ce docker-ce-cli containerd.io</code></pre></div><h3 id="启动docker"><a class="markdownIt-Anchor" href="#启动docker"></a> 启动docker</h3><div class="hljs"><pre><code class="hljs html">$ sudo systemctl start docker</code></pre></div><h3 id="设置docker开机自启"><a class="markdownIt-Anchor" href="#设置docker开机自启"></a> 设置docker开机自启</h3><div class="hljs"><pre><code class="hljs html">$ sudo systemctl enable docker</code></pre></div><h3 id="查看镜像列表"><a class="markdownIt-Anchor" href="#查看镜像列表"></a> 查看镜像列表</h3><div class="hljs"><pre><code class="hljs html">$ sudo docker images</code></pre></div><h3 id="查看容器列表"><a class="markdownIt-Anchor" href="#查看容器列表"></a> 查看容器列表</h3><div class="hljs"><pre><code class="hljs html">$ sudo docker ps</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
