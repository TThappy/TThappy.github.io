<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orange</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-16T15:02:04.867Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Orange</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django rest framework</title>
    <link href="http://yoursite.com/2020/07/16/Django-rest-framework/"/>
    <id>http://yoursite.com/2020/07/16/Django-rest-framework/</id>
    <published>2020-07-16T15:00:31.000Z</published>
    <updated>2020-07-16T15:02:04.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-rest-framework"><a class="markdownIt-Anchor" href="#django-rest-framework"></a> Django rest framework</h1><h2 id="基础构建"><a class="markdownIt-Anchor" href="#基础构建"></a> 基础构建</h2><p>首先startapp api</p><p>接着将rest_framework,api注册到app中</p><p>之后</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PERMISSION_CLASSES'</span>: [        <span class="hljs-string">'rest_framework.permissions.IsAdminUser'</span>,    ], <span class="hljs-comment">#配置全局权限</span>    <span class="hljs-string">'DEFAULT_AUTHENTICATION_CLASSES'</span>:[], <span class="hljs-comment">#配置全局认证</span>    <span class="hljs-string">'PAGE_SIZE'</span>: <span class="hljs-number">10</span>&#125;<span class="hljs-comment">#局部的view.py可以设置空的认证</span>authentication_classes = []</code></pre></div><h2 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h2><p>CBV 模式</p><p>请求进来先执行dispatch,接着执行请求方式</p><h3 id="token-实现基本认证"><a class="markdownIt-Anchor" href="#token-实现基本认证"></a> token 实现基本认证</h3><div class="hljs"><pre><code class="hljs python">首先要创建两张表<span class="hljs-comment">#view.py</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BasicAuthentication<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<span class="hljs-keyword">import</span> json<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_token_code</span><span class="hljs-params">(username)</span>:</span>    <span class="hljs-string">"""</span><span class="hljs-string">    根据用户名和时间戳来生成永不相同的token随机字符串</span><span class="hljs-string">    :param username: 字符串格式的用户名</span><span class="hljs-string">    :return: 字符串格式的Token</span><span class="hljs-string">    """</span>    <span class="hljs-keyword">import</span> time    <span class="hljs-keyword">import</span> hashlib    timestamp = str(time.time())    m = hashlib.md5(username.encode(<span class="hljs-string">"utf-8"</span>))    <span class="hljs-comment"># md5 要传入字节类型的数据</span>    m.update(timestamp.encode(<span class="hljs-string">"utf-8"</span>))    <span class="hljs-keyword">return</span> m.hexdigest()  <span class="hljs-comment"># 将生成的随机字符串返回</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    authentication_classes = [MyAuthentication,]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span>        ret = &#123;            <span class="hljs-string">'code'</span>:<span class="hljs-number">1000</span>,            <span class="hljs-string">'msg'</span>:<span class="hljs-string">'xxx'</span>        &#125;        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(ret))    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthView</span><span class="hljs-params">(APIView)</span>:</span><span class="hljs-string">'''</span><span class="hljs-string">用户登录</span><span class="hljs-string">'''</span>    authentication_classes = []    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        data = request.POST        print(data)        username = data[<span class="hljs-string">'username'</span>]        password = data[<span class="hljs-string">'password'</span>]        user = models.User.objects.filter(username=username,password=password).first()        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">'code'</span>:<span class="hljs-number">1002</span>,<span class="hljs-string">'message'</span>:<span class="hljs-string">'登录失败'</span>&#125;))        <span class="hljs-keyword">else</span>:            res = &#123;<span class="hljs-string">'code'</span>:<span class="hljs-number">1000</span>&#125;            token = get_token_code(username)            models.UserToken.objects.update_or_create(user=user,defaults=&#123;<span class="hljs-string">"token"</span>:token&#125;)            res[<span class="hljs-string">'token'</span>] = token            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(res))</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#auth.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<span class="hljs-keyword">from</span> users <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAuthentication</span><span class="hljs-params">(BaseAuthentication)</span>:</span>    <span class="hljs-string">'''</span><span class="hljs-string">    用户认证</span><span class="hljs-string">    '''</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(self, request)</span>:</span>        meth = request.method        token = request.data.get(<span class="hljs-string">'token'</span>)  <span class="hljs-comment"># _request是原生的request</span>        token_obj = models.UserToken.objects.filter(token=token).first()        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(<span class="hljs-string">'用户认证失败'</span>)        <span class="hljs-keyword">return</span> (token_obj.user,token)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(self, val)</span>:</span>        <span class="hljs-keyword">pass</span></code></pre></div><h2 id="权限"><a class="markdownIt-Anchor" href="#权限"></a> 权限</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#permisssion.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> permissions<span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPermission</span><span class="hljs-params">(BasePermission)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_permission</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-keyword">if</span> request.user.gender == <span class="hljs-string">'女'</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <span class="hljs-comment">#无权限</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-comment">#有权限</span></code></pre></div><h2 id="频率"><a class="markdownIt-Anchor" href="#频率"></a> 频率</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#throttle.py</span><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> BaseThrottle<span class="hljs-keyword">import</span> timeVISIT_RECORD = &#123;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthThrottle</span><span class="hljs-params">(BaseThrottle)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">allow_request</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-comment">#获取ip地址</span>        remote_addr = self.get_ident(request)        ctime = time.time()        <span class="hljs-keyword">if</span> remote_addr <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> VISIT_RECORD:            VISIT_RECORD[remote_addr] = [ctime,] <span class="hljs-comment">#将ip地址存入</span>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-comment">#return False 表示访问频率太高被限制</span>        history = VISIT_RECORD.get(remote_addr)        history.insert(<span class="hljs-number">0</span>,ctime)        <span class="hljs-keyword">while</span> history <span class="hljs-keyword">and</span> history[<span class="hljs-number">-1</span>] &lt; ctime - <span class="hljs-number">60</span>:            history.pop()        <span class="hljs-keyword">if</span> len(history) &lt; <span class="hljs-number">3</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wait</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-string">'''还需要等待多长时间'''</span>        ctime = time.time()        <span class="hljs-keyword">return</span> <span class="hljs-number">60</span> - (ctime - self.history[<span class="hljs-number">-1</span>])</code></pre></div><div class="hljs"><pre><code class="hljs python">内置访问频率<span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_THROTTLE_CLASSES'</span>:[],<span class="hljs-comment">#配置全局频率</span>    <span class="hljs-string">'DEFAULT_THROTTLE_RATES'</span>:&#123;        <span class="hljs-string">'wyc'</span>:<span class="hljs-string">'3/m'</span> <span class="hljs-comment">#每分钟三次 ,'wyc' 需要设置 scope</span>    &#125;,&#125;<span class="hljs-comment">#throttle.py</span><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThrottle</span><span class="hljs-params">(SimpleRateThrottle)</span>:</span>    scope = <span class="hljs-string">'wyc'</span> <span class="hljs-comment">#全局配置中的key</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache_key</span><span class="hljs-params">(self, request, view)</span>:</span>        <span class="hljs-keyword">return</span> self.get_ident(request)</code></pre></div><h2 id="版本"><a class="markdownIt-Anchor" href="#版本"></a> 版本</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">1.</span>通过get传参<span class="hljs-comment">#setting.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_VERSION'</span>:<span class="hljs-string">'v1'</span>,    <span class="hljs-string">'ALLOWED_VERSION'</span>:[<span class="hljs-string">'v1'</span>,<span class="hljs-string">'v2'</span>],    <span class="hljs-string">'VERSION_PARAM'</span>:<span class="hljs-string">'version'</span>&#125;<span class="hljs-comment">#自定义</span><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> BaseVersioning<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParamVersion</span><span class="hljs-params">(BaseVersioning)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">determine_version</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span>        version = request.query_params.get(<span class="hljs-string">'version'</span>) <span class="hljs-comment">#传入version参数</span>        <span class="hljs-keyword">return</span> versionversioning_class = ParamVersion<span class="hljs-comment">#内置</span><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> QueryParameterVersioningversioning_class = QueryParameterVersioning</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-number">2.</span>通过路由<span class="hljs-comment">#urls.py</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_VERSIONING_CLASS'</span>:<span class="hljs-string">"rest_framework.versioning.URLPathVersioning"</span>,    <span class="hljs-string">'DEFAULT_VERSION'</span>:<span class="hljs-string">'v1'</span>,    <span class="hljs-string">'ALLOWED_VERSION'</span>:[<span class="hljs-string">'v1'</span>,<span class="hljs-string">'v2'</span>],    <span class="hljs-string">'VERSION_PARAM'</span>:<span class="hljs-string">'version'</span>&#125;</code></pre></div><h2 id="解析器"><a class="markdownIt-Anchor" href="#解析器"></a> 解析器</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#全局配置</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PARSER_CLASSES'</span>: [<span class="hljs-string">'rest_framework.parsers.JSONParser'</span>,<span class="hljs-string">'rest_framework.parsers.FormParser'</span>],    &#125;<span class="hljs-keyword">from</span> rest_framework.parsers <span class="hljs-keyword">import</span> JSONParser,FormParser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-params">()</span>:</span>     parser_classes = [JSONParser,FormParser]     <span class="hljs-string">'''</span><span class="hljs-string">     JSONParser:</span><span class="hljs-string">            允许用户发json格式数据</span><span class="hljs-string">            a.content-type:application/json</span><span class="hljs-string">            b.request.data获取数据</span><span class="hljs-string">       FormParser:</span><span class="hljs-string">       a.content-type:application/x-www-form-unlencoded头</span><span class="hljs-string">       b.可以用request.data获取数据</span><span class="hljs-string">     '''</span>在APIView中封装的request，就实现了请求数据的解析：对于GET请求的参数我们通过request.query_params来获取。对于POST请求、PUT请求的数据我们通过request.data来获取。</code></pre></div><h2 id="序列化"><a class="markdownIt-Anchor" href="#序列化"></a> 序列化</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#urls.py对单个数据查询</span>url(<span class="hljs-string">r'goods/(?P&lt;pk&gt;\d+)$'</span>,views.GoodsView.as_view()),<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        print(request.user,request.auth)        pk = kwargs.get(<span class="hljs-string">'pk'</span>)        goods = models.Goods.objects.filter(id=pk).first()        ser = serializer.GoodsSerializer(goods,many=<span class="hljs-literal">False</span>)        <span class="hljs-keyword">return</span> Response(ser.data)<span class="hljs-comment">#serializer.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<span class="hljs-keyword">from</span> users <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        models = models.Goods        fields = <span class="hljs-string">"__all__"</span>        depth = <span class="hljs-number">0</span> <span class="hljs-comment">#深度用来查看外键表的数据</span><span class="hljs-comment">#view.py</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span>        print(request.user,request.auth)        goods = models.Goods.objects.all()        ser = serializer.GoodsSerializer(goods,many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> Response(ser.data)<span class="hljs-comment">#校验</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span>    title = serializers.CharField(error_messages=&#123;<span class="hljs-string">'required'</span>:<span class="hljs-string">'标题不能为空'</span>&#125;)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsView</span><span class="hljs-params">(APIView)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span>        ser = serializer.GoodsSerializer(data=request.data)        <span class="hljs-keyword">if</span> ser.is_valid():            print(ser.validated_data)        <span class="hljs-keyword">else</span>:            print(ser.errors)</code></pre></div><h2 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#url.py</span>url(<span class="hljs-string">r'^good/$'</span>,views.GenView.as_view(&#123;<span class="hljs-string">'get'</span>:<span class="hljs-string">'list'</span>,<span class="hljs-string">'post'</span>:<span class="hljs-string">'create'</span>&#125;)),url(<span class="hljs-string">r'^good/(?P&lt;pk&gt;\d+)/$'</span>,views.GenView.as_view(&#123;<span class="hljs-string">'get'</span>:<span class="hljs-string">'retrieve'</span>,<span class="hljs-string">'put'</span>:<span class="hljs-string">'update'</span>,<span class="hljs-string">'delete'</span>:<span class="hljs-string">'destroy'</span>,<span class="hljs-string">'patch'</span>:<span class="hljs-string">'partial_update'</span>,<span class="hljs-string">'post'</span>:<span class="hljs-string">'create'</span>&#125;)),<span class="hljs-comment">#view.py</span><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<span class="hljs-keyword">from</span> rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenView</span><span class="hljs-params">(ModelViewSet)</span>:</span>    authentication_classes = []    queryset = models.Goods.objects.all()    serializer_class = serializer.GoodsSerializer    pagination_class = PageNumberPagination</code></pre></div><h2 id="路由"><a class="markdownIt-Anchor" href="#路由"></a> 路由</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#url.py</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routersrouter = routers.DefaultRouter()router.register(<span class="hljs-string">r'good'</span>,views.GenView)urlpatterns = [    url(<span class="hljs-string">r''</span>,include(router.urls)) <span class="hljs-comment">#自动添加view相关的路由,四个</span>]</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;django-rest-framework&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#django-rest-framework&quot;&gt;&lt;/a&gt; Django rest framework&lt;/h1&gt;
&lt;h2 id=&quot;基础构建&quot;&gt;&lt;a c
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django基础配置和知识</title>
    <link href="http://yoursite.com/2020/07/15/Django%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/07/15/Django%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-15T09:14:30.000Z</published>
    <updated>2020-07-15T09:17:05.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django基础配置"><a class="markdownIt-Anchor" href="#django基础配置"></a> Django基础配置</h1><h2 id="新建的目录"><a class="markdownIt-Anchor" href="#新建的目录"></a> 新建的目录</h2><p>1.static 用来存放静态文件例如:js,css</p><p>2.log 用来存放日志文件</p><p>3.media 用来存放上传的文件</p><p>4.apps 用来存放各个app ,将apps右键设置Mark Directory as Resoruce Root方便引入app <a href="http://view.py" target="_blank" rel="noopener">view.py</a></p><hr><h2 id="settingpy"><a class="markdownIt-Anchor" href="#settingpy"></a> <a href="http://setting.py" target="_blank" rel="noopener">setting.py</a> 配置</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#中文配置</span><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><span class="hljs-comment">#static文件配置 </span>STATICFILES_DIRS=[    os.path.join(BASE_DIR,<span class="hljs-string">"static"</span>)]<span class="hljs-comment">#apps文件配置</span>sys.path.insert(<span class="hljs-number">0</span>,os.path.join(BASE_DIR,<span class="hljs-string">'apps'</span>))<span class="hljs-comment">#数据库配置需要在文件__init__.py下</span><span class="hljs-keyword">import</span> pymysqlpymysql.install_as_MySQLdb()DATABASES = &#123;    <span class="hljs-string">"default"</span>: &#123;        <span class="hljs-string">"ENGINE"</span>: <span class="hljs-string">"django.db.backends.mysql"</span>,        <span class="hljs-string">"NAME"</span>: <span class="hljs-string">"missgoods"</span>,  <span class="hljs-comment"># 需要自己手动创建数据库</span>        <span class="hljs-string">"USER"</span>: <span class="hljs-string">"用户名"</span>,        <span class="hljs-string">"PASSWORD"</span>: <span class="hljs-string">"密码"</span>,        <span class="hljs-string">"HOST"</span>: <span class="hljs-string">"localhost"</span>,        <span class="hljs-string">"POST"</span>: <span class="hljs-number">3306</span>,        <span class="hljs-string">'OPTIONS'</span>: &#123;<span class="hljs-string">'charset'</span>:<span class="hljs-string">'utf8mb4'</span>&#125;    &#125;&#125;<span class="hljs-comment">#时区配置</span>TIME_ZONE = <span class="hljs-string">'Asia/Shanghai'</span>USE_TZ = <span class="hljs-literal">False</span><span class="hljs-comment">#restframework配置</span>REST_FRAMEWORK = &#123;    <span class="hljs-string">'DEFAULT_PERMISSION_CLASSES'</span>: [        <span class="hljs-string">'rest_framework.permissions.IsAdminUser'</span>,    ],    <span class="hljs-string">'PAGE_SIZE'</span>: <span class="hljs-number">10</span>&#125;<span class="hljs-comment">#media配置</span>MEDIA_ROOT = os.path.join(BASE_DIR,<span class="hljs-string">"media"</span>)MEDIA_URL = <span class="hljs-string">"/media/"</span><span class="hljs-comment">#需在url.py中配置</span><span class="hljs-keyword">from</span> django.conf.urls.static <span class="hljs-keyword">import</span> static<span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settingsurlpatterns + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</code></pre></div><hr><h2 id="users的设计"><a class="markdownIt-Anchor" href="#users的设计"></a> users的设计</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#1.创建一个users app</span><span class="hljs-comment">#2.设计model.py</span><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span><span class="hljs-params">(AbstractUser)</span>:</span>        nick_name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">"昵称"</span>,default=<span class="hljs-string">"管理员"</span>)        birthday = models.DateField(verbose_name=<span class="hljs-string">'生日'</span>,null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>)        gender = models.CharField(choices=((<span class="hljs-string">"男"</span>),(<span class="hljs-string">"女"</span>)),default=<span class="hljs-string">"女"</span>)        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>            verbose_name = <span class="hljs-string">"用户"</span>            verbose_name_plural = verbose_name<span class="hljs-comment">#3.配置setting.py</span>AUTH_USER_MODEL = <span class="hljs-string">"users.User"</span><span class="hljs-comment">#4.配置amdmin.py注册表</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin    <span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> User    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>        <span class="hljs-keyword">pass</span>admin.site.register(User,UserAdmin)<span class="hljs-comment">#ps:如果需要迁移数据库需要删除 django.contrib.admin 和 django.contrib.auth 中的migrations</span></code></pre></div><h2 id="managepy"><a class="markdownIt-Anchor" href="#managepy"></a> <a href="http://manage.py" target="_blank" rel="noopener">manage.py</a> 命令</h2><p>python <a href="http://manage.py" target="_blank" rel="noopener">manage.py</a> +</p><p>1.startapp [app名称]</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#setting.py中配置</span>INSTALLED_APPS = [    <span class="hljs-string">'app名称'</span>]</code></pre></div><p>2.runserver 运行项目</p><p>3.makemigrations [app名称]生成默认数据表</p><p>4.migrate [app名称]生成数据库</p><hr><h2 id="urlpy配置"><a class="markdownIt-Anchor" href="#urlpy配置"></a> url.py配置</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url,include<span class="hljs-keyword">from</span> django.conf.urls.static <span class="hljs-keyword">import</span> static<span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settingsurlpatterns = [    url(<span class="hljs-string">'admin/'</span>, admin.site.urls),    url(<span class="hljs-string">'/'</span>,include(<span class="hljs-string">'app名称.urls'</span>)),] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</code></pre></div><hr><h2 id="xadmin"><a class="markdownIt-Anchor" href="#xadmin"></a> xadmin</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#创建一个extra_apps</span><span class="hljs-comment">#放入xadmin源码</span><span class="hljs-comment">#url配置</span><span class="hljs-keyword">import</span> xadminurlpatterns = [    url(<span class="hljs-string">'xadmin/'</span>, xadmin.site.urls),]<span class="hljs-comment">#setting.py配置</span>INSTALLED_APPS = [    <span class="hljs-string">'xadmin'</span>,    <span class="hljs-string">'crispy_forms'</span>]<span class="hljs-comment">#进行makemigrations migrate</span><span class="hljs-comment">#注册model</span><span class="hljs-comment">#首先在app中创建一个adminx.py文件</span>    <span class="hljs-keyword">import</span> xadmin    <span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> model名称    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">model</span>名称<span class="hljs-title">Admin</span><span class="hljs-params">(Object)</span>:</span>        list_display = [<span class="hljs-string">'model属性'</span>] <span class="hljs-comment">#用来显示</span>        search_fields = [<span class="hljs-string">'model属性'</span>] <span class="hljs-comment">#用来搜索</span>        list_filter = [<span class="hljs-string">'model属性] #用来筛选</span><span class="hljs-string">        model_icon = '</span><span class="hljs-string">'  #设置左边的图标</span><span class="hljs-string">        ordering = ['</span>upTime<span class="hljs-string">'] #排序</span><span class="hljs-string">    xadmin.site.register(model名称,modelmingcAdmin) #注册</span><span class="hljs-string">  </span><span class="hljs-string">#全局配置</span><span class="hljs-string">#随便进入一个adminx.py文件配置</span><span class="hljs-string">    from xadmin import views</span><span class="hljs-string">        class BaseSetting(object):</span><span class="hljs-string">            enable_themes = True #主题功能</span><span class="hljs-string">            use_bootswatch = True</span><span class="hljs-string">        xadmin.site.register(views.BaseAdminView,BaseSetting)</span><span class="hljs-string"> </span><span class="hljs-string">        class GlobalSetting(object):</span><span class="hljs-string">            site_title = "智能物品招领" #最左上角的标题</span><span class="hljs-string">            site_footer = "招领"  #底部的标题</span><span class="hljs-string">        xadmin.site.register(views.CommAdminView,GlobalSetting)</span><span class="hljs-string">     #页面app的修改方式</span><span class="hljs-string">        #1.在apps.py中</span><span class="hljs-string">        class UsersConfig(AppConfig):</span><span class="hljs-string">            name = '</span>users<span class="hljs-string">'</span><span class="hljs-string">                verbose_name = "用户操作" #修改名称</span><span class="hljs-string">        #2.在app的__init__.py中</span><span class="hljs-string">            default_app_config ="users.apps.UsersConfig"</span></code></pre></div><h1 id="django-基础知识"><a class="markdownIt-Anchor" href="#django-基础知识"></a> Django 基础知识</h1><h2 id="orm与model"><a class="markdownIt-Anchor" href="#orm与model"></a> orm与model</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#model.py</span><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-class"><span class="hljs-keyword">class</span> 表名<span class="hljs-params">(models.Model)</span>:</span>        auto_now_add=<span class="hljs-literal">True</span> <span class="hljs-comment">#创建数据生成的时间</span>    AutoField(Field)        - int自增列，必须填入参数 primary_key=<span class="hljs-literal">True</span>    BigAutoField(AutoField)        - bigint自增列，必须填入参数 primary_key=<span class="hljs-literal">True</span>        注：当model中如果没有自增列，则自动会创建一个列名为id的列        <span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><span class="hljs-params">(models.Model)</span>:</span>            <span class="hljs-comment"># 自动创建一个列名为id的且为自增的整数列</span>            username = models.CharField(max_length=<span class="hljs-number">32</span>)        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Group</span><span class="hljs-params">(models.Model)</span>:</span>            <span class="hljs-comment"># 自定义自增列</span>            nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)            name = models.CharField(max_length=<span class="hljs-number">32</span>)    SmallIntegerField(IntegerField):        - 小整数 <span class="hljs-number">-32768</span> ～ <span class="hljs-number">32767</span>    PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)        - 正小整数 <span class="hljs-number">0</span> ～ <span class="hljs-number">32767</span>    IntegerField(Field)        - 整数列(有符号的) <span class="hljs-number">-2147483648</span> ～ <span class="hljs-number">2147483647</span>    PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)        - 正整数 <span class="hljs-number">0</span> ～ <span class="hljs-number">2147483647</span>    BigIntegerField(IntegerField):        - 长整型(有符号的) <span class="hljs-number">-9223372036854775808</span> ～ <span class="hljs-number">9223372036854775807</span>    BooleanField(Field)        - 布尔值类型    NullBooleanField(Field):        - 可以为空的布尔值    CharField(Field)        - 字符类型        - 必须提供max_length参数， max_length表示字符长度    TextField(Field)        - 文本类型    EmailField(CharField)：        - 字符串类型，Django Admin以及ModelForm中提供验证机制    IPAddressField(Field)        - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制    GenericIPAddressField(Field)        - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6        - 参数：            protocol，用于指定Ipv4或Ipv6， <span class="hljs-string">'both'</span>,<span class="hljs-string">"ipv4"</span>,<span class="hljs-string">"ipv6"</span>            unpack_ipv4， 如果指定为<span class="hljs-literal">True</span>，则输入::ffff:<span class="hljs-number">192.0</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>时候，可解析为<span class="hljs-number">192.0</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>，开启此功能，需要protocol=<span class="hljs-string">"both"</span>    URLField(CharField)        - 字符串类型，Django Admin以及ModelForm中提供验证 URL    SlugField(CharField)        - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）    CommaSeparatedIntegerField(CharField)        - 字符串类型，格式必须为逗号分割的数字    UUIDField(Field)        - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证    FilePathField(Field)        - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能        - 参数：                path,                      文件夹路径                match=<span class="hljs-literal">None</span>,                正则匹配                recursive=<span class="hljs-literal">False</span>,           递归下面的文件夹                allow_files=<span class="hljs-literal">True</span>,          允许文件                allow_folders=<span class="hljs-literal">False</span>,       允许文件夹    FileField(Field)        - 字符串，路径保存在数据库，文件上传到指定目录        - 参数：            upload_to = <span class="hljs-string">""</span>      上传文件的保存路径            storage = <span class="hljs-literal">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage    ImageField(FileField)        - 字符串，路径保存在数据库，文件上传到指定目录        - 参数：            upload_to = <span class="hljs-string">""</span>      上传文件的保存路径            storage = <span class="hljs-literal">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage            width_field=<span class="hljs-literal">None</span>,   上传图片的高度保存的数据库字段名（字符串）            height_field=<span class="hljs-literal">None</span>   上传图片的宽度保存的数据库字段名（字符串）    DateTimeField(DateField)        - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]    DateField(DateTimeCheckMixin, Field)        - 日期格式      YYYY-MM-DD    TimeField(DateTimeCheckMixin, Field)        - 时间格式      HH:MM[:ss[.uuuuuu]]    DurationField(Field)        - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型    FloatField(Field)        - 浮点型    DecimalField(Field)        - <span class="hljs-number">10</span>进制小数        - 参数：            max_digits，小数总长度            decimal_places，小数位长度    BinaryField(Field)        - 二进制类型    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        verbose_name = <span class="hljs-string">u"表名"</span>        verbose_name_plural = verbose_name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> self.属性名</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;django基础配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#django基础配置&quot;&gt;&lt;/a&gt; Django基础配置&lt;/h1&gt;
&lt;h2 id=&quot;新建的目录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>hexo +github+阿里云全站加速搭建个人博客</title>
    <link href="http://yoursite.com/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-14T16:00:00.000Z</published>
    <updated>2020-07-15T08:48:40.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h1><h2 id="11-准备工作"><a class="markdownIt-Anchor" href="#11-准备工作"></a> 1.1 准备工作</h2><ul><li><p>一个github账号</p></li><li><p>安装了 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 和 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>，使用npm</p></li><li><p>安装好git 之后，右键打开<code>git bash here</code>输入git信息，下面信息可以填你自己的</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">config</span> <span class="hljs-selector-tag">--global</span> <span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.email</span> "<span class="hljs-selector-tag">you</span><span class="hljs-keyword">@example</span>.com"git config --global user.name <span class="hljs-string">"Your Name"</span></code></pre></div></li></ul><h1 id="2-搭建博客"><a class="markdownIt-Anchor" href="#2-搭建博客"></a> 2. 搭建博客</h1><h2 id="21-创建github仓库"><a class="markdownIt-Anchor" href="#21-创建github仓库"></a> 2.1 创建GitHub仓库</h2><p>​在github里新建一个<code>你的用户名.github.io</code>的仓库，必须是你的GitHub用户名,不然无效，这样将来可以访问你的地址 <code>https://你的用户名.github.io</code></p><h2 id="22-全局安装hexo"><a class="markdownIt-Anchor" href="#22-全局安装hexo"></a> 2.2 全局安装hexo</h2><p>​你可以打开<code>git bash here</code>输入<code>npm install -g hexo-cli</code> 进行安装</p><h2 id="23-初始化一个hexo项目"><a class="markdownIt-Anchor" href="#23-初始化一个hexo项目"></a> 2.3 初始化一个hexo项目</h2><p>​可以在桌面上新建一个文件夹叫做<code>myblog</code>用于以后在里面写博客再上传到github里，然后打开这个文件夹的<code>cmd</code>如下所示（以下命令都是在这个<code>cmd</code>中操作）</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" srcset="/img/loading.gif" class></p><p>接着输入<code>hexo init</code>进行初始化项目,会生成如下目录</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png" srcset="/img/loading.gif" class></p><p>此时本地的仓库初始化完成了，你可以输入<code>hexo server</code>打开本地服务进行查看</p><h2 id="24-部署到github"><a class="markdownIt-Anchor" href="#24-部署到github"></a> 2.4 部署到github</h2><p>打开<code>_congig.yml</code>文件找到deploy进行如下配置：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">deploy</span>:  <span class="hljs-selector-tag">type</span>: <span class="hljs-selector-tag">git</span>  repo: https://github.com/你的github用户名/你的github用户名.github.io.git  <span class="hljs-selector-tag">branch</span>: <span class="hljs-selector-tag">master</span></code></pre></div><p>接着需要一个hexo插件来帮助我们推到github的仓库里面，安装插件：</p><div class="hljs"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></div><p>最后只要输入：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">clean</span><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">deploy</span></code></pre></div><p>第一个命令用于清除缓存，第二个用于上传github仓库期间可能需要你登录一个github账号密码，之后写md博客的时候都需要使用这两个命令，这时候就已经部署成功了，打开<code>https://你的用户名.github.io</code>就可以访问了</p><h2 id="25-更换主题皮肤"><a class="markdownIt-Anchor" href="#25-更换主题皮肤"></a> 2.5 更换主题皮肤</h2><p>在hexo官网找到自己喜欢的theme主题，然后git clone到目录的<code>theme</code>里面</p><p>然后将主题名称配置在<code>_congig.yml</code>文件中：</p><div class="hljs"><pre><code class="hljs css"># <span class="hljs-selector-tag">Extensions</span>## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/<span class="hljs-selector-tag">theme</span>: 安装的主题名称</code></pre></div><p>然后再利用<code>hexo clean</code>和<code>hexo deploy</code>上传到github里，之后本地进行的修改都要及时上传</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" srcset="/img/loading.gif" class></p><h1 id="3-阿里云全站加速"><a class="markdownIt-Anchor" href="#3-阿里云全站加速"></a> 3. 阿里云全站加速</h1><p>​为什么要使用阿里云全站加速呢，因为这样可以使得我们的博客访问的速度变得更快，当然觉得繁琐可以跳过这一部分</p><h2 id="31-准备工作"><a class="markdownIt-Anchor" href="#31-准备工作"></a> 3.1 准备工作</h2><ul><li>购买一个域名，用来映射github域名（需要备案）可以先用域名加速</li><li>用阿里云购买一个全站加速，按量收费即可，基本不花钱</li></ul><h2 id="32-使用全站加速"><a class="markdownIt-Anchor" href="#32-使用全站加速"></a> 3.2 使用全站加速</h2><ol><li><p>首先需要添加域名</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png" srcset="/img/loading.gif" class></p></li><li><p>域名填写你的域名</p></li><li><p>源站信息选择<code>IP</code>,填写如下信息</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png" srcset="/img/loading.gif" class></p></li></ol><p>上述信息是github的ip地址端口是443，需要填写四个，git pages会在这四个地址中变化</p><ol start="4"><li><p>解析域名</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png" srcset="/img/loading.gif" class></p><p>打开解析添加一条记录，<code>记录类型</code>选择<code>CNAME</code>，主机记录按照你加速的域名填，根据下表：</p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" srcset="/img/loading.gif" class></p><p><code>记录值</code>是刚刚全站加速添加域名的<code>CNAME</code></p><p>​<img src="/2020/07/15/hexo%20+github+%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E7%AB%99%E5%8A%A0%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png" srcset="/img/loading.gif" class></p></li></ol><p>之后添加即可。</p><ol start="5"><li>与github域名绑定</li></ol><p>在本地的<code>myblog</code>文件中的<code>source</code>目录创建一个<code>CNAME</code>文件，在里面用编辑器输入你在全站加速里面添加的域名。用<code>hexo deploy</code>上传到github就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-前言&quot;&gt;&lt;/a&gt; 1. 前言&lt;/h1&gt;
&lt;h2 id=&quot;11-准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-准备工作&quot;&gt;&lt;/a&gt; 1
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Docker在linux系统安装</title>
    <link href="http://yoursite.com/2020/07/14/Docker%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/07/14/Docker%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-14T14:09:53.000Z</published>
    <updated>2020-07-15T03:17:50.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker在linux系统安装"><a class="markdownIt-Anchor" href="#docker在linux系统安装"></a> Docker在linux系统安装</h1><h3 id="删除旧版本的docker目录文件"><a class="markdownIt-Anchor" href="#删除旧版本的docker目录文件"></a> 删除旧版本的docker目录文件</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre></div><h3 id="安装docker的仓库repository"><a class="markdownIt-Anchor" href="#安装docker的仓库repository"></a> 安装docker的仓库(repository)</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum install -y yum-utils</code></pre></div><div class="hljs"><pre><code class="hljs html">$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre></div><h3 id="下载docker驱动"><a class="markdownIt-Anchor" href="#下载docker驱动"></a> 下载docker驱动</h3><div class="hljs"><pre><code class="hljs html">$ sudo yum install docker-ce docker-ce-cli containerd.io</code></pre></div><h3 id="启动docker"><a class="markdownIt-Anchor" href="#启动docker"></a> 启动docker</h3><div class="hljs"><pre><code class="hljs html">$ sudo systemctl start docker</code></pre></div><h3 id="设置docker开机自启"><a class="markdownIt-Anchor" href="#设置docker开机自启"></a> 设置docker开机自启</h3><div class="hljs"><pre><code class="hljs html">$ sudo systemctl enable docker</code></pre></div><h3 id="查看镜像列表"><a class="markdownIt-Anchor" href="#查看镜像列表"></a> 查看镜像列表</h3><div class="hljs"><pre><code class="hljs html">$ sudo docker images</code></pre></div><h3 id="查看容器列表"><a class="markdownIt-Anchor" href="#查看容器列表"></a> 查看容器列表</h3><div class="hljs"><pre><code class="hljs html">$ sudo docker ps</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker在linux系统安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker在linux系统安装&quot;&gt;&lt;/a&gt; Docker在linux系统安装&lt;/h1&gt;
&lt;h3 id=&quot;删除旧版本的docker目录文件&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
</feed>
